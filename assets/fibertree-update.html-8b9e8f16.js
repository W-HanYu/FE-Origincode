import{_ as l}from"./fibertree-beforecommit-ba9006a9.js";import{_ as i,p as r,q as u,s,R as n,t as a,a2 as p,Y as e,n as c}from"./framework-e1bed10d.js";const d="/FE-Origincode/assets/beforeupdate-9f7cdc06.png",k="/FE-Origincode/assets/markupdatelane-fce67e8d.png",v="/FE-Origincode/assets/status-refreshstack-d6fa3caf.png",b="/FE-Origincode/assets/unitofwork0-28f10760.png",m="/FE-Origincode/assets/unitofwork1-f20d1de7.png",f="/FE-Origincode/assets/unitofwork2-8237a2d4.png",h="/FE-Origincode/assets/unitofwork3.0-f48307d2.png",g="/FE-Origincode/assets/unitofwork3.1-2df91b53.png",_="/FE-Origincode/assets/unitofwork4-94d5bc56.png",y="/FE-Origincode/assets/unitofwork5-70b2b1f7.png",w="/FE-Origincode/assets/unitofwork6-d276b950.png",W="/FE-Origincode/assets/unitofwork7-3847890f.png",P="/FE-Origincode/assets/unitofwork8-5ed0c83f.png",L={},O=s("h1",{id:"fiber-树构造-对比更新",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fiber-树构造-对比更新","aria-hidden":"true"},"#"),n(" fiber 树构造(对比更新)")],-1),x=s("code",null,"fiber树构造循环",-1),F=s("code",null,"fiber树",-1),I=s("code",null,"对比更新",-1),C=s("code",null,"Legacy",-1),R=s("code",null,"对比更新",-1),U=s("code",null,"初次创建",-1),j={href:"https://codesandbox.io/s/angry-williams-l1mze?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"},H=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">App Mount</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Header <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span><span class="token operator">&gt;</span>change<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;content&quot;</span><span class="token operator">&gt;</span>
          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
            <span class="token operator">&lt;</span>p key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>title<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>title2<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>初次渲染</code>完成之后, 与<code>fiber树</code>相关的内存结构如下(后文以此图为基础, 演示<code>对比更新</code>过程):</p><p><img src="`+d+'" alt=""></p><h2 id="更新入口" tabindex="-1"><a class="header-anchor" href="#更新入口" aria-hidden="true">#</a> 更新入口</h2>',4),S=s("code",null,"scheduleUpdateOnFiber",-1),E={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L517-L619",target:"_blank",rel:"noopener noreferrer"},A=s("code",null,"react-reconciler",-1),T=s("code",null,"首次渲染",-1),N=s("code",null,"对比更新",-1),q=s("code",null,"scheduleUpdateOnFiber",-1),D=s("code",null,"scheduleUpdateOnFiber",-1),B=s("code",null,"必经之路",-1),M=s("h3",{id:"_3-种更新方式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-种更新方式","aria-hidden":"true"},"#"),n(" 3 种更新方式")],-1),X=s("p",null,"如要主动发起更新, 有 3 种常见方式:",-1),V=s("li",null,[s("code",null,"Class"),n("组件中调用"),s("code",null,"setState"),n(".")],-1),z=s("li",null,[s("code",null,"Function"),n("组件中调用"),s("code",null,"hook"),n("对象暴露出的"),s("code",null,"dispatchAction"),n(".")],-1),Q=s("code",null,"container",-1),Y=s("code",null,"render",-1),G={href:"https://reactjs.org/docs/rendering-elements.html#react-only-updates-whats-necessary",target:"_blank",rel:"noopener noreferrer"},J=s("p",null,"下面列出这 3 种更新方式的源码:",-1),K=s("h4",{id:"setstate",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#setstate","aria-hidden":"true"},"#"),n(" setState")],-1),Z=s("code",null,"Component",-1),$=s("code",null,"setState",-1),nn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react/src/ReactBaseClasses.js#L57-L66",target:"_blank",rel:"noopener noreferrer"},sn=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">Component</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">partialState<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> partialState<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">&#39;setState&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),an=s("code",null,"beginWork",-1),en=s("code",null,"this.updater",-1),on={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L193-L225",target:"_blank",rel:"noopener noreferrer"},tn=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> classComponentUpdater <span class="token operator">=</span> <span class="token punctuation">{</span>
  isMounted<span class="token punctuation">,</span>
  <span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token parameter">inst<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 获取class实例对应的fiber节点</span>
    <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 创建update对象</span>
    <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确定当前update对象的优先级</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
    update<span class="token punctuation">.</span>payload <span class="token operator">=</span> payload<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3. 将update对象添加到当前Fiber节点的updateQueue队列当中</span>
    <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 进入reconciler运作流程中的\`输入\`环节</span>
    <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入的lane是update优先级</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dispatchaction" tabindex="-1"><a class="header-anchor" href="#dispatchaction" aria-hidden="true">#</a> dispatchAction</h4><blockquote><p>此处只是为了对比<code>dispatchAction</code>和<code>setState</code>. 有关<code>hook</code>原理的深入分析, 在<code>hook 原理</code>章节中详细讨论.</p></blockquote>`,3),pn=s("code",null,"function类型",-1),cn=s("code",null,"hook(useState)",-1),ln=s("code",null,"hook api",-1),rn=s("code",null,"dispatchAction",-1),un={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberHooks.old.js#L1645-L1753",target:"_blank",rel:"noopener noreferrer"},dn=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> dispatchAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">fiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">queue</span><span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 创建update对象</span>
  <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 确定当前update对象的优先级</span>
  <span class="token keyword">const</span> <span class="token literal-property property">update</span><span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    lane<span class="token punctuation">,</span>
    action<span class="token punctuation">,</span>
    <span class="token literal-property property">eagerReducer</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">eagerState</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 将update对象添加到当前Hook对象的updateQueue队列当中</span>
  <span class="token keyword">const</span> pending <span class="token operator">=</span> queue<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    update<span class="token punctuation">.</span>next <span class="token operator">=</span> pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    pending<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> update<span class="token punctuation">;</span>
  <span class="token comment">// 3. 请求调度, 进入reconciler运作流程中的\`输入\`环节.</span>
  <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入的lane是update优先级</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重复调用-render" tabindex="-1"><a class="header-anchor" href="#重复调用-render" aria-hidden="true">#</a> 重复调用 render</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),kn=s("code",null,"render",-1),vn=s("code",null,"updateContainer-->scheduleUpdateOnFiber",-1),bn=s("code",null,"scheduleUpdateOnFiber",-1),mn=s("code",null,"scheduleUpdateOnFiber",-1),fn=s("code",null,"输入",-1),hn=s("h2",{id:"构造阶段",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#构造阶段","aria-hidden":"true"},"#"),n(" 构造阶段")],-1),gn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L517-L619",target:"_blank",rel:"noopener noreferrer"},_n=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略部分代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>
  <span class="token literal-property property">fiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span> <span class="token comment">// fiber表示被更新的节点</span>
  <span class="token literal-property property">lane</span><span class="token operator">:</span> Lane<span class="token punctuation">,</span> <span class="token comment">// lane表示update优先级</span>
  <span class="token literal-property property">eventTime</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">markUpdateLaneFromFiberToRoot</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lane <span class="token operator">===</span> SyncLane<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> LegacyUnbatchedContext<span class="token punctuation">)</span> <span class="token operator">!==</span> NoContext <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RenderContext <span class="token operator">|</span> CommitContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> NoContext
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 初次渲染</span>
      <span class="token function">performSyncWorkOnRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 对比更新</span>
      <span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  mostRecentlyUpdatedRoot <span class="token operator">=</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>对比更新</code>与<code>初次渲染</code>的不同点:</p>`,2),yn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L625-L667",target:"_blank",rel:"noopener noreferrer"},wn=s("code",null,"对比更新",-1),Wn=s("code",null,"fiber树",-1),Pn=s("code",null,"update",-1),Ln=s("code",null,"fiber.lanes",-1),On=s("code",null,"fiber.childLanes",-1),xn=s("code",null,"legacy",-1),Fn=s("code",null,"SyncLane",-1),In=s("code",null,"fiber树构造",-1),Cn=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">markUpdateLaneFromFiberToRoot</span><span class="token punctuation">(</span>
  <span class="token literal-property property">sourceFiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span> <span class="token comment">// sourceFiber表示被更新的节点</span>
  <span class="token literal-property property">lane</span><span class="token operator">:</span> Lane<span class="token punctuation">,</span> <span class="token comment">// lane表示update优先级</span>
<span class="token punctuation">)</span><span class="token operator">:</span> FiberRoot <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 将update优先级设置到sourceFiber.lanes</span>
  sourceFiber<span class="token punctuation">.</span>lanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>sourceFiber<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> alternate <span class="token operator">=</span> sourceFiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 同时设置sourceFiber.alternate的优先级</span>
    alternate<span class="token punctuation">.</span>lanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>alternate<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 2. 从sourceFiber开始, 向上遍历所有节点, 直到HostRoot. 设置沿途所有节点(包括alternate)的childLanes</span>
  <span class="token keyword">let</span> node <span class="token operator">=</span> sourceFiber<span class="token punctuation">;</span>
  <span class="token keyword">let</span> parent <span class="token operator">=</span> sourceFiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    parent<span class="token punctuation">.</span>childLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>childLanes<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
    alternate <span class="token operator">=</span> parent<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      alternate<span class="token punctuation">.</span>childLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>alternate<span class="token punctuation">.</span>childLanes<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag <span class="token operator">===</span> HostRoot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot <span class="token operator">=</span> node<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="markupdatelanefromfibertoroot" tabindex="-1"><a class="header-anchor" href="#markupdatelanefromfibertoroot" aria-hidden="true">#</a> markUpdateLaneFromFiberToRoot</h3><p>下图表示了<code>markUpdateLaneFromFiberToRoot</code>的具体作用:</p><ul><li>以<code>sourceFiber</code>为起点, 设置起点的<code>fiber.lanes</code></li><li>从起点开始, 直到<code>HostRootFiber</code>, 设置父路径上所有节点(也包括<code>fiber.alternate</code>)的<code>fiber.childLanes</code>.</li><li>通过设置<code>fiber.lanes</code>和<code>fiber.childLanes</code>就可以辅助判断子树是否需要更新(在下文<code>循环构造</code>中详细说明).</li></ul><p><img src="`+k+'" alt=""></p>',5),Rn={start:"2"},Un=s("code",null,"对比更新",-1),jn=s("code",null,"performSyncWorkOnRoot",-1),Hn=s("code",null,"Legacy",-1),Sn=s("code",null,"performSyncWorkOnRoot",-1),En=s("code",null,"performSyncWorkOnRoot--->renderRootSync--->workLoopSync",-1),An=s("code",null,"初次构造",-1),Tn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1490-L1553",target:"_blank",rel:"noopener noreferrer"},Nn=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">renderRootSync</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> <span class="token literal-property property">lanes</span><span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prevExecutionContext <span class="token operator">=</span> executionContext<span class="token punctuation">;</span>
  executionContext <span class="token operator">|=</span> RenderContext<span class="token punctuation">;</span>
  <span class="token comment">// 如果fiberRoot变动, 或者update.lane变动, 都会刷新栈帧, 丢弃上一次渲染进度</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressRoot <span class="token operator">!==</span> root <span class="token operator">||</span> workInProgressRootRenderLanes <span class="token operator">!==</span> lanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 刷新栈帧, legacy模式下都会进入</span>
    <span class="token function">prepareFreshStack</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>thrownValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handleError</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> thrownValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  executionContext <span class="token operator">=</span> prevExecutionContext<span class="token punctuation">;</span>
  <span class="token comment">// 重置全局变量, 表明render结束</span>
  workInProgressRoot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  workInProgressRootRenderLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">return</span> workInProgressRootExitStatus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),qn=s("code",null,"workLoopSync",-1),Dn=s("code",null,"prepareFreshStack",-1),Bn=s("code",null,"栈帧管理",-1),Mn=e('<p>此时的内存结构如下:</p><p><img src="'+v+'" alt=""></p><p>注意:</p><ul><li><code>fiberRoot.current</code>指向与当前页面对应的<code>fiber树</code>, <code>workInProgress</code>指向正在构造的<code>fiber树</code>.</li><li>刷新栈帧会调用<code>createWorkInProgress()</code>, 使得<code>workInProgress.flags和workInProgress.effects</code>都已经被重置. 且<code>workInProgress.child = current.child</code>. 所以在进入<code>循环构造</code>之前, <code>HostRootFiber</code>与<code>HostRootFiber.alternate</code>共用一个<code>child</code>(这里是<code>fiber(&lt;App/&gt;)</code>).</li></ul><h3 id="循环构造" tabindex="-1"><a class="header-anchor" href="#循环构造" aria-hidden="true">#</a> 循环构造</h3>',5),Xn=s("code",null,"fiber树构造",-1),Vn=s("code",null,"workInProgress",-1),zn=s("code",null,"current",-1),Qn=s("code",null,"双缓冲技术",-1),Yn=e(`<ul><li><code>workInProgress</code>和<code>current</code>都视为指针</li><li><code>workInProgress</code>指向当前正在构造的<code>fiber</code>节点</li><li><code>current = workInProgress.alternate</code>(即<code>fiber.alternate</code>), 指向当前页面正在使用的<code>fiber</code>节点.</li></ul><p>在深度优先遍历中, 每个<code>fiber</code>节点都会经历 2 个阶段:</p><ol><li>探寻阶段 <code>beginWork</code></li><li>回溯阶段 <code>completeWork</code></li></ol><p>这 2 个阶段共同完成了每一个<code>fiber</code>节点的创建(或更新), 所有<code>fiber</code>节点则构成了<code>fiber树</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// ... 省略部分无关代码</span>
<span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">unitOfWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// unitOfWork就是被传入的workInProgress</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> unitOfWork<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
  <span class="token keyword">let</span> next<span class="token punctuation">;</span>
  next <span class="token operator">=</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> unitOfWork<span class="token punctuation">,</span> subtreeRenderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  unitOfWork<span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> unitOfWork<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果没有派生出新的节点, 则进入completeWork阶段, 传入的是当前unitOfWork</span>
    <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>unitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    workInProgress <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: 在<code>对比更新</code>过程中<code>current = unitOfWork.alternate;</code>不为<code>null</code>, 后续的调用逻辑中会大量使用此处传入的<code>current</code>.</p><h3 id="探寻阶段-beginwork" tabindex="-1"><a class="header-anchor" href="#探寻阶段-beginwork" aria-hidden="true">#</a> 探寻阶段 beginWork</h3>`,7),Gn=s("code",null,"beginWork(current, unitOfWork, subtreeRenderLanes)",-1),Jn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L3083-L3494",target:"_blank",rel:"noopener noreferrer"},Kn=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> updateLanes <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>lanes<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 进入对比</span>
    <span class="token keyword">const</span> oldProps <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      oldProps <span class="token operator">!==</span> newProps <span class="token operator">||</span>
      <span class="token function">hasLegacyContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>__DEV__ <span class="token operator">?</span> workInProgress<span class="token punctuation">.</span>type <span class="token operator">!==</span> current<span class="token punctuation">.</span>type <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">includesSomeLane</span><span class="token punctuation">(</span>renderLanes<span class="token punctuation">,</span> updateLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当前渲染优先级renderLanes不包括fiber.lanes, 表明当前fiber节点无需更新</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>
        workInProgress<span class="token punctuation">.</span>tag
        <span class="token comment">// switch 语句中包括 context相关逻辑, 本节暂不讨论(不影响分析fiber树构造)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 当前fiber节点无需更新, 调用bailoutOnAlreadyFinishedWork循环检测子节点是否需要更新</span>
      <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 余下逻辑与初次创建共用</span>
  <span class="token comment">// 1. 设置workInProgress优先级为NoLanes(最高优先级)</span>
  workInProgress<span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token comment">// 2. 根据workInProgress节点的类型, 用不同的方法派生出子节点</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>
    workInProgress<span class="token punctuation">.</span>tag <span class="token comment">// 只列出部分case</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> Component <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
      <span class="token keyword">const</span> unresolvedProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
      <span class="token keyword">const</span> resolvedProps <span class="token operator">=</span>
        workInProgress<span class="token punctuation">.</span>elementType <span class="token operator">===</span> Component
          <span class="token operator">?</span> unresolvedProps
          <span class="token operator">:</span> <span class="token function">resolveDefaultProps</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> unresolvedProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span>
        current<span class="token punctuation">,</span>
        workInProgress<span class="token punctuation">,</span>
        Component<span class="token punctuation">,</span>
        resolvedProps<span class="token punctuation">,</span>
        renderLanes<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateHostRoot</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostText</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateHostText</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Fragment</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateFragment</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bailout逻辑-bailout" tabindex="-1"><a class="header-anchor" href="#bailout逻辑-bailout" aria-hidden="true">#</a> <code>bailout</code>逻辑 {#bailout}</h4><blockquote><p><code>bail out</code>英文短语翻译为<code>解救, 纾困</code>, 在源码中, <code>bailout</code>用于判断子树节点是否完全复用, 如果可以复用, 则会略过 fiber 树构造.</p></blockquote><p>与<code>初次创建</code>不同, 在<code>对比更新</code>过程中, 如果是<code>老节点</code>, 那么<code>current !== null</code>, 需要进行对比, 然后决定是否复用老节点及其子树(即<code>bailout</code>逻辑).</p>`,4),Zn=s("code",null,"!includesSomeLane(renderLanes, updateLanes)",-1),$n=s("code",null,"渲染优先级",-1),ns=s("code",null,"update优先级",-1),ss=s("code",null,"优先级",-1),as=s("code",null,"bailout",-1),es=e("<li>最后会调用<code>bailoutOnAlreadyFinishedWork</code>: <ul><li>如果同时满足<code>!includesSomeLane(renderLanes, workInProgress.childLanes)</code>, 表明该 fiber 节点及其子树都无需更新, 可直接进入回溯阶段(<code>completeUnitOfWork</code>)</li><li>如果不满足<code>!includesSomeLane(renderLanes, workInProgress.childLanes)</code>, 意味着子节点需要更新, <code>clone</code>并返回子节点.</li></ul></li>",1),os=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 省略部分无关代码</span>
<span class="token keyword">function</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">includesSomeLane</span><span class="token punctuation">(</span>renderLanes<span class="token punctuation">,</span> workInProgress<span class="token punctuation">.</span>childLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 渲染优先级不包括 workInProgress.childLanes, 表明子节点也无需更新. 返回null, 直接进入回溯阶段.</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 本fiber虽然不用更新, 但是子节点需要更新. clone并返回子节点</span>
    <span class="token function">cloneChildFibers</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: <code>cloneChildFibers</code>内部调用<code>createWorkInProgress</code>, 在构造<code>fiber</code>节点时会优先复用<code>workInProgress.alternate</code>(不开辟新的内存空间), 否则才会创建新的<code>fiber</code>对象.</p><h4 id="updatexxx函数" tabindex="-1"><a class="header-anchor" href="#updatexxx函数" aria-hidden="true">#</a> <code>updateXXX</code>函数</h4><p><code>updateXXX</code>函数(如: updateHostRoot, updateClassComponent 等)的主干逻辑与<code>初次构造</code>过程完全一致, 总的目的是为了向下生成子节点, 并在这个过程中调用<code>reconcileChildren</code>调和函数, 只要<code>fiber</code>节点有副作用, 就会把特殊操作设置到<code>fiber.flags</code>(如:<code>节点ref</code>,<code>class组件的生命周期</code>,<code>function组件的hook</code>,<code>节点删除</code>等).</p><p><code>对比更新</code>过程的不同之处:</p><ol><li><code>bailoutOnAlreadyFinishedWork</code><ul><li><code>对比更新</code>时如果遇到当前节点无需更新(如: <code>class</code>类型的节点且<code>shouldComponentUpdate</code>返回<code>false</code>), 会再次进入<code>bailout</code>逻辑.</li></ul></li><li><code>reconcileChildren</code>调和函数 <ul><li>调和函数是<code>updateXXX</code>函数中的一项重要逻辑, 它的作用是向下生成子节点, 并设置<code>fiber.flags</code>.</li><li><code>初次创建</code>时<code>fiber</code>节点没有比较对象, 所以在向下生成子节点的时候没有任何多余的逻辑, 只管创建就行.</li><li><code>对比更新</code>时需要把<code>ReactElement</code>对象与<code>旧fiber</code>对象进行比较, 来判断是否需要复用<code>旧fiber</code>对象.</li></ul></li></ol>`,6),ts=s("code",null,"fiber树构造",-1),ps=s("code",null,"对比更新",-1),cs=s("code",null,"reconcileChildren()函数",-1),ls=s("code",null,"diff",-1),is=s("code",null,"diff",-1),rs=s("p",null,"本节只需要先了解调和函数目的:",-1),us=s("li",null,[n("给新增,移动,和删除节点设置"),s("code",null,"fiber.flags"),n("(新增,移动: "),s("code",null,"Placement"),n(", 删除: "),s("code",null,"Deletion"),n(")")],-1),ds=s("code",null,"fiber",-1),ks={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactChildFiber.old.js#L275-L294",target:"_blank",rel:"noopener noreferrer"},vs=s("code",null,"Deletion",-1),bs=s("code",null,"effects",-1),ms=s("code",null,"completeWork",-1),fs=s("code",null,"fiber",-1),hs=s("code",null,"completeWork",-1),gs=s("code",null,"beginWork",-1),_s=s("h3",{id:"回溯阶段-completework",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#回溯阶段-completework","aria-hidden":"true"},"#"),n(" 回溯阶段 completeWork")],-1),ys=s("code",null,"completeUnitOfWork(unitOfWork)函数",-1),ws={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1670-L1802",target:"_blank",rel:"noopener noreferrer"},Ws=s("code",null,"初次创建",-1),Ps=s("code",null,"对比更新",-1),Ls=s("code",null,"beginWork",-1),Os=s("code",null,"fiber",-1),xs=e(`<p>在这里我们重点关注<code>completeWork</code>函数中, <code>current !== null</code>的情况:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略无关代码</span>
<span class="token keyword">function</span> <span class="token function">completeWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 非文本节点</span>
      <span class="token function">popHostContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> rootContainerInstance <span class="token operator">=</span> <span class="token function">getRootHostContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> type <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理改动</span>
        <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>
          current<span class="token punctuation">,</span>
          workInProgress<span class="token punctuation">,</span>
          type<span class="token punctuation">,</span>
          newProps<span class="token punctuation">,</span>
          rootContainerInstance<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>ref <span class="token operator">!==</span> workInProgress<span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">markRef</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...省略无关代码</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostText</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 文本节点</span>
      <span class="token keyword">const</span> newText <span class="token operator">=</span> newProps<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> oldText <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>
        <span class="token comment">// 处理改动</span>
        <span class="token function">updateHostText</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> oldText<span class="token punctuation">,</span> newText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...省略无关代码</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">updateHostComponent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">,</span>
  <span class="token literal-property property">newProps</span><span class="token operator">:</span> Props<span class="token punctuation">,</span>
  <span class="token literal-property property">rootContainerInstance</span><span class="token operator">:</span> Container<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> oldProps <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">===</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token literal-property property">instance</span><span class="token operator">:</span> Instance <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
  <span class="token keyword">const</span> currentHostContext <span class="token operator">=</span> <span class="token function">getHostContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> updatePayload <span class="token operator">=</span> <span class="token function">prepareUpdate</span><span class="token punctuation">(</span>
    instance<span class="token punctuation">,</span>
    type<span class="token punctuation">,</span>
    oldProps<span class="token punctuation">,</span>
    newProps<span class="token punctuation">,</span>
    rootContainerInstance<span class="token punctuation">,</span>
    currentHostContext<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  workInProgress<span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token punctuation">(</span>updatePayload<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果有属性变动, 设置fiber.flags |= Update, 等待\`commit\`阶段的处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>updatePayload<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function-variable function">updateHostText</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">oldText</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">newText</span><span class="token operator">:</span> string<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果有属性变动, 设置fiber.flags |= Update, 等待\`commit\`阶段的处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldText <span class="token operator">!==</span> newText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Fs=s("code",null,"fiber.flags |= Update",-1),Is=s("code",null,"commit",-1),Cs={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L197-L248",target:"_blank",rel:"noopener noreferrer"},Rs=e('<h3 id="过程图解" tabindex="-1"><a class="header-anchor" href="#过程图解" aria-hidden="true">#</a> 过程图解</h3><p>针对本节的示例代码, 将整个<code>fiber</code>树构造过程表示出来:</p><p>构造前:</p><p>在上文已经说明, 进入循环构造前会调用<code>prepareFreshStack</code>刷新栈帧, 在进入<code>fiber树构造</code>循环之前, 保持这这个初始化状态:</p><p><img src="'+b+'" alt=""></p><p><code>performUnitOfWork</code>第 1 次调用(只执行<code>beginWork</code>):</p><ul><li>执行前: <code>workInProgress</code>指向<code>HostRootFiber.alternate</code>对象, 此时<code>current = workInProgress.alternate</code>指向当前页面对应的<code>fiber</code>树.</li><li>执行过程: <ul><li>因为<code>current !== null</code>且当前节点<code>fiber.lanes</code>不在<code>渲染优先级</code>范围内, 故进入<code>bailoutOnAlreadyFinishedWork</code>逻辑</li><li>又因为<code>fiber.childLanes</code>处于<code>渲染优先级</code>范围内, 证明<code>child</code>节点需要更新, 克隆<code>workInProgress.child</code>节点.</li><li><code>clone</code>之后, <code>新fiber</code>节点会丢弃<code>旧fiber</code>上的标志位(<code>flags</code>)和副作用(<code>effects</code>), 其他属性会继续保留.</li></ul></li><li>执行后: 返回被<code>clone</code>的下级节点<code>fiber(&lt;App/&gt;)</code>, 移动<code>workInProgress</code>指向子节点<code>fiber(&lt;App/&gt;)</code></li></ul><p><img src="'+m+'" alt=""></p><p><code>performUnitOfWork</code>第 2 次调用(只执行<code>beginWork</code>):</p><ul><li>执行前: <code>workInProgress</code>指向<code>fiber(&lt;App/&gt;)</code>节点, 且<code>current = workInProgress.alternate</code>有值</li><li>执行过程: <ul><li>当前节点<code>fiber.lanes</code>处于<code>渲染优先级</code>范围内, 会进入<code>updateClassComponent()</code>函数</li><li>在<code>updateClassComponent()</code>函数中, 调用<code>reconcileChildren()</code>生成下级子节点.</li></ul></li><li>执行后: 返回下级节点<code>fiber(&lt;Header/&gt;)</code>, 移动<code>workInProgress</code>指向子节点<code>fiber(&lt;Header/&gt;)</code></li></ul><p><img src="'+f+'" alt=""></p><p><code>performUnitOfWork</code>第 3 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):</p><ul><li><code>beginWork</code>执行前: <code>workInProgress</code>指向<code>fiber(&lt;Header/&gt;)</code>, 且<code>current = workInProgress.alternate</code>有值</li><li><code>beginWork</code>执行过程: <ul><li>当前节点<code>fiber.lanes</code>处于<code>渲染优先级</code>范围内, 会进入<code>updateClassComponent()</code>函数</li><li>在<code>updateClassComponent()</code>函数中, 由于此组件是<code>PureComponent</code>, <code>shouldComponentUpdate</code>判定为<code>false</code>,故进入<code>bailoutOnAlreadyFinishedWork</code>逻辑.</li><li>又因为<code>fiber.childLanes</code>不在<code>渲染优先级</code>范围内, 证明<code>child</code>节点也不需要更新</li></ul></li><li><code>beginWork</code>执行后: 因为完全满足<code>bailout</code>逻辑, 返回<code>null</code>. 所以进入<code>completeUnitOfWork(unitOfWork)</code>函数, 传入的参数<code>unitOfWork</code>实际上就是<code>workInProgress</code>(此时指向<code>fiber(&lt;Header/&gt;)</code>)</li></ul><p><img src="'+h+'" alt=""></p><ul><li><code>completeUnitOfWork</code>执行前: <code>workInProgress</code>指向<code>fiber(&lt;Header/&gt;)</code></li><li><code>completeUnitOfWork</code>执行过程: 以<code>fiber(&lt;Header/&gt;)</code>为起点, 向上回溯</li></ul><p><code>completeUnitOfWork</code>第 1 次循环:</p><ol><li>执行<code>completeWork</code>函数: <code>class</code>类型的组件无需处理.</li><li>上移副作用队列: 由于本节点<code>fiber(header)</code>没有副作用(<code>fiber.flags = 0</code>), 所以执行之后副作用队列没有实质变化(目前为空).</li><li>向上回溯: 由于还有兄弟节点, 把<code>workInProgress</code>指向下一个兄弟节点<code>fiber(button)</code>, 退出<code>completeUnitOfWork</code>.</li></ol><p><img src="'+g+'" alt=""></p><p><code>performUnitOfWork</code>第 4 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):</p>',19),Us=s("p",null,[s("code",null,"beginWork"),n("执行过程: 调用"),s("code",null,"updateHostComponent")],-1),js=s("code",null,"button",-1),Hs={href:"https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOMHostConfig.js#L350-L361",target:"_blank",rel:"noopener noreferrer"},Ss={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L1147",target:"_blank",rel:"noopener noreferrer"},Es=s("li",null,[n("由于"),s("code",null,"nextChildren = null"),n(", 经过"),s("code",null,"reconcileChildren"),n("阶段处理后, 返回值也是"),s("code",null,"null")],-1),As=e("<li><p><code>beginWork</code>执行后: 由于下级节点为<code>null</code>, 所以进入<code>completeUnitOfWork(unitOfWork)</code>函数, 传入的参数<code>unitOfWork</code>实际上就是<code>workInProgress</code>(此时指向<code>fiber(button)</code>节点)</p></li><li><p><code>completeUnitOfWork</code>执行过程: 以<code>fiber(button)</code>为起点, 向上回溯</p></li>",2),Ts=e('<p><code>completeUnitOfWork</code>第 1 次循环:</p><ol><li>执行<code>completeWork</code>函数 <ul><li>因为<code>fiber(button).stateNode != null</code>, 所以无需再次创建 DOM 对象. 只需要进一步调用<code>updateHostComponent()</code>记录 DOM 属性改动情况</li><li>在<code>updateHostComponent()</code>函数中, 又因为<code>oldProps === newProps</code>, 所以无需记录改动情况, 直接返回</li></ul></li><li>上移副作用队列: 由于本节点<code>fiber(button)</code>没有副作用(<code>fiber.flags = 0</code>), 所以执行之后副作用队列没有实质变化(目前为空).</li><li>向上回溯: 由于还有兄弟节点, 把<code>workInProgress</code>指向下一个兄弟节点<code>fiber(div)</code>, 退出<code>completeUnitOfWork</code>.</li></ol><p><img src="'+_+'" alt=""></p><p><code>performUnitOfWork</code>第 5 次调用(执行<code>beginWork</code>):</p>',4),Ns=s("li",null,[n("执行前: "),s("code",null,"workInProgress"),n("指向"),s("code",null,"fiber(div)"),n("节点, 且"),s("code",null,"current = workInProgress.alternate"),n("有值")],-1),qs=s("li",null,[n("在"),s("code",null,"updateHostComponent()"),n("函数中, 调用"),s("code",null,"reconcileChildren()"),n("生成下级子节点.")],-1),Ds=s("code",null,"fiber.child.sibling",-1),Bs=s("code",null,"fiber.flags",-1),Ms=s("li",null,[n("执行后: 返回下级节点"),s("code",null,"fiber(p)"),n(", 移动"),s("code",null,"workInProgress"),n("指向子节点"),s("code",null,"fiber(p)")],-1),Xs=e('<p><img src="'+y+'" alt=""></p><p><code>performUnitOfWork</code>第 6 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):</p><ul><li><p><code>beginWork</code>执行过程: 与第 4 次调用中构建<code>fiber(button)</code>的逻辑完全一致, 因为都是直接文本节点, <code>reconcileChildren()</code>返回的下级子节点为 null.</p></li><li><p><code>beginWork</code>执行后: 由于下级节点为<code>null</code>, 所以进入<code>completeUnitOfWork(unitOfWork)</code>函数</p></li><li><p><code>completeUnitOfWork</code>执行过程: 以<code>fiber(p)</code>为起点, 向上回溯</p></li></ul><p><code>completeUnitOfWork</code>第 1 次循环:</p><ol><li>执行<code>completeWork</code>函数 <ul><li>因为<code>fiber(p).stateNode != null</code>, 所以无需再次创建 DOM 对象. 在<code>updateHostComponent()</code>函数中, 又因为节点属性没有变动, 所以无需打标记</li></ul></li><li>上移副作用队列: 本节点<code>fiber(p)</code>没有副作用(<code>fiber.flags = 0</code>).</li><li>向上回溯: 由于还有兄弟节点, 把<code>workInProgress</code>指向下一个兄弟节点<code>fiber(p)</code>, 退出<code>completeUnitOfWork</code>.</li></ol><p><img src="'+w+'" alt=""></p><p><code>performUnitOfWork</code>第 7 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):</p><ul><li><p><code>beginWork</code>执行过程: 与第 4 次调用中构建<code>fiber(button)</code>的逻辑完全一致, 因为都是直接文本节点, <code>reconcileChildren()</code>返回的下级子节点为 null.</p></li><li><p><code>beginWork</code>执行后: 由于下级节点为<code>null</code>, 所以进入<code>completeUnitOfWork(unitOfWork)</code>函数</p></li><li><p><code>completeUnitOfWork</code>执行过程: 以<code>fiber(p)</code>为起点, 向上回溯</p></li></ul><p><code>completeUnitOfWork</code>第 1 次循环:</p><ol><li><p>执行<code>completeWork</code>函数:</p><ul><li>因为<code>fiber(p).stateNode != null</code>, 所以无需再次创建 DOM 对象. 在<code>updateHostComponent()</code>函数中, 又因为节点属性没有变动, 所以无需打标记</li></ul></li><li><p>上移副作用队列: 本节点<code>fiber(p)</code>有副作用(<code>fiber.flags = Placement</code>), 需要将其添加到父节点的副作用队列之后.</p></li><li><p>向上回溯: 由于还有兄弟节点, 把<code>workInProgress</code>指向下一个兄弟节点<code>fiber(p)</code>, 退出<code>completeUnitOfWork</code>.</p></li></ol><p><img src="'+W+'" alt=""></p><p><code>performUnitOfWork</code>第 8 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):</p><ul><li><p><code>beginWork</code>执行过程: 本节点<code>fiber(p)</code>是一个新增节点, 其<code>current === null</code>, 会进入<code>updateHostComponent()</code>函数. 因为是直接文本节点, <code>reconcileChildren()</code>返回的下级子节点为 null.</p></li><li><p><code>beginWork</code>执行后: 由于下级节点为<code>null</code>, 所以进入<code>completeUnitOfWork(unitOfWork)</code>函数</p></li><li><p><code>completeUnitOfWork</code>执行过程: 以<code>fiber(p)</code>为起点, 向上回溯</p></li></ul><p><code>completeUnitOfWork</code>第 1 次循环:</p><ol><li>执行<code>completeWork</code>函数: 由于本节点是一个新增节点,且<code>fiber(p).stateNode === null</code>, 所以创建<code>fiber(p)</code>节点对应的<code>DOM</code>实例, 挂载到<code>fiber.stateNode</code>之上.</li><li>上移副作用队列: 本节点<code>fiber(p)</code>有副作用(<code>fiber.flags = Placement</code>), 需要将其添加到父节点的副作用队列之后.</li><li>向上回溯: 由于没有兄弟节点, 把<code>workInProgress</code>指针指向父节点<code>fiber(div)</code>.</li></ol><p><img src="'+P+'" alt=""></p><p><code>completeUnitOfWork</code>第 2 次循环:</p><ol><li>执行<code>completeWork</code>函数: 由于<code>div</code>组件没有属性变动, 故<code>updateHostComponent()</code>没有设置副作用标记</li><li>上移副作用队列: 本节点<code>fiber(div)</code>的副作用队列添加到父节点的副作用队列之后.</li><li>向上回溯: 由于没有兄弟节点, 把<code>workInProgress</code>指针指向父节点<code>fiber(&lt;App/&gt;)</code></li></ol><p><code>completeUnitOfWork</code>第 3 次循环:</p><ol><li>执行<code>completeWork</code>函数: class 类型的节点无需处理</li><li>上移副作用队列: 本节点<code>fiber(&lt;App/&gt;)</code>的副作用队列添加到父节点的副作用队列之后.</li><li>向上回溯: 由于没有兄弟节点, 把<code>workInProgress</code>指针指向父节点<code>fiber(HostRootFiber)</code></li></ol><p><code>completeUnitOfWork</code>第 4 次循环:</p><ol><li>执行<code>completeWork</code>函数: <code>HostRoot</code>类型的节点无需处理</li><li>向上回溯: 由于父节点为空, 无需进入处理副作用队列的逻辑. 最后设置<code>workInProgress=null</code>, 并退出<code>completeUnitOfWork</code></li><li>重置<code>fiber.childLanes</code></li></ol><p>到此整个<code>fiber树构造循环(对比更新)</code>已经执行完毕, 拥有一棵新的<code>fiber树</code>, 并且在<code>fiber树</code>的根节点上挂载了副作用队列. <code>renderRootSync</code>函数退出之前, 会重置<code>workInProgressRoot = null</code>, 表明没有正在进行中的<code>render</code>. 且把最新的<code>fiber树</code>挂载到<code>fiberRoot.finishedWork</code>上. 这时整个 fiber 树的内存结构如下(注意<code>fiberRoot.finishedWork</code>和<code>fiberRoot.current</code>指针,在<code>commitRoot</code>阶段会进行处理):</p><p><img src="'+l+'" alt=""></p>',24),Vs=s("code",null,"初次构造",-1),zs=s("code",null,"对比更新",-1),Qs=s("code",null,"fiber树构造",-1),Ys=e('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节演示了更新阶段<code>fiber树构造(对比更新)</code>的全部过程, 跟踪了创建过程中内存引用的变化情况. 与<code>初次构造</code>最大的不同在于<code>fiber节点</code>是否可以复用, 其中<code>bailout</code>逻辑是<code>fiber子树</code>能否复用的判断依据.</p>',2);function Gs(Js,Ks){const o=c("RouterLink"),t=c("ExternalLinkIcon");return r(),u("div",null,[O,s("p",null,[n("在前文"),a(o,{to:"/docs/react/principle-analysis/fibertree-create.html"},{default:p(()=>[n("fiber 树构造(初次创建)")]),_:1}),n("一文的介绍中, 演示了"),x,n("中逐步构造"),F,n("的过程. 由于是初次创建, 所以在构造过程中, 所有节点都是新建, 并没有复用旧节点.")]),s("p",null,[n("本节讨论"),I,n("这种情况(在"),C,n("模式下进行分析). 在阅读本节之前, 最好对"),a(o,{to:"/docs/react/principle-analysis/fibertree-create.html"},{default:p(()=>[n("fiber 树构造(初次创建)")]),_:1}),n("有一些了解, 其中有很多相似逻辑不再重复叙述, 本节重点突出"),R,n("与"),U,n("的不同之处.")]),s("p",null,[n("本节示例代码如下("),s("a",j,[n("codesandbox 地址"),a(t)]),n("):")]),H,s("p",null,[n("前文"),a(o,{to:"/docs/react/principle-analysis/reconciler-workflow.html#%E8%BE%93%E5%85%A5"},{default:p(()=>[n("reconciler 运作流程")]),_:1}),n("中总结的 4 个阶段(从输入到输出), 其中承接输入的函数只有"),S,n("("),s("a",E,[n("源码地址"),a(t)]),n(").在"),A,n("对外暴露的 api 函数中, 只要涉及到需要改变 fiber 的操作(无论是"),T,n("或"),N,n("), 最后都会间接调用"),q,n(", "),D,n("函数是输入链路中的"),B,n(".")]),M,X,s("ol",null,[V,z,s("li",null,[n("在"),Q,n("节点上重复调用"),Y,n("("),s("a",G,[n("官网示例"),a(t)]),n(")")])]),J,K,s("p",null,[n("在"),Z,n("对象的原型上挂载有"),$,n("("),s("a",nn,[n("源码链接"),a(t)]),n("):")]),sn,s("p",null,[n("在"),a(o,{to:"/docs/react/principle-analysis/fibertree-create.html"},{default:p(()=>[n("fiber 树构造(初次创建)")]),_:1}),n("中的"),an,n("阶段, class 类型的组件初始化完成之后, "),en,n("对象如下("),s("a",on,[n("源码链接"),a(t)]),n("):")]),tn,s("p",null,[n("在"),pn,n("组件中, 如果使用"),cn,n(", 则可以通过"),ln,n("暴露出的"),rn,n("("),s("a",un,[n("源码链接"),a(t)]),n(")来更新")]),dn,s("p",null,[n("对于重复"),kn,n(", 在"),a(o,{to:"/docs/react/principle-analysis/bootstrap.html"},{default:p(()=>[n("React 应用的启动过程")]),_:1}),n("中已有说明, 调用路径包含"),vn]),s("blockquote",null,[s("p",null,[n("故无论从哪个入口进行更新, 最终都会进入"),bn,n(", 再次证明"),mn,n("是"),fn,n("阶段的必经函数(参考"),a(o,{to:"/docs/react/principle-analysis/reconciler-workflow.html"},{default:p(()=>[n("reconciler 运作流程")]),_:1}),n(").")])]),hn,s("p",null,[n("逻辑来到"),s("a",gn,[n("scheduleUpdateOnFiber"),a(t)]),n("函数:")]),_n,s("ol",null,[s("li",null,[s("a",yn,[n("markUpdateLaneFromFiberToRoot"),a(t)]),n("函数, 只在"),wn,n("阶段才发挥出它的作用, 它找出了"),Wn,n("中受到本次"),Pn,n("影响的所有节点, 并设置这些节点的"),Ln,n("或"),On,n("(在"),xn,n("模式下为"),Fn,n(")以备"),In,n("阶段使用.")])]),Cn,s("ol",Rn,[s("li",null,[Un,n("没有直接调用"),jn,n(", 而是通过调度中心来处理, 由于本示例是在"),Hn,n("模式下进行, 最后会同步执行"),Sn,n(".(详细原理可以参考"),a(o,{to:"/docs/react/principle-analysis/scheduler.html"},{default:p(()=>[n("React 调度原理(scheduler)")]),_:1}),n("). 所以其调用链路"),En,n("与"),An,n("中的一致.")])]),s("p",null,[n("在"),s("a",Tn,[n("renderRootSync"),a(t)]),n("中:")]),Nn,s("p",null,[n("进入循环构造("),qn,n(")前, 会刷新栈帧(调用"),Dn,n(")(参考"),a(o,{to:"/docs/react/principle-analysis/fibertree-prepare.html#%E6%A0%88%E5%B8%A7%E7%AE%A1%E7%90%86"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n("中"),Bn,n(").")]),Mn,s("p",null,[n("回顾一下"),a(o,{to:"/docs/react/principle-analysis/fibertree-create.html"},{default:p(()=>[n("fiber 树构造(初次创建)")]),_:1}),n("中的介绍. 整个"),Xn,n("是一个深度优先遍历(可参考"),a(o,{to:"/docs/react/algorithm/dfs.html"},{default:p(()=>[n("React 算法之深度优先遍历")]),_:1}),n("), 其中有 2 个重要的变量"),Vn,n("和"),zn,n("(可参考"),a(o,{to:"/docs/react/principle-analysis/fibertree-prepare.html#%E5%8F%8C%E7%BC%93%E5%86%B2%E6%8A%80%E6%9C%AF"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n("中介绍的"),Qn,n("):")]),Yn,s("p",null,[Gn,n("("),s("a",Jn,[n("源码地址"),a(t)]),n(").")]),Kn,s("ol",null,[s("li",null,[Zn,n("这个判断分支, 包含了"),$n,n("和"),ns,n("的比较(详情可以回顾"),a(o,{to:"/docs/react/principle-analysis/fibertree-prepare.html#%E4%BC%98%E5%85%88%E7%BA%A7"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n("中"),ss,n("相关解读), 如果当前节点无需更新, 则会进入"),as,n("逻辑.")]),es]),os,s("p",null,[n("注: 本节的重点是"),ts,n(", 在"),ps,n("过程中"),cs,n("实现的"),ls,n("算法十分重要, 但是它只是处于算法层面, 对于"),is,n("算法的实现,在"),a(o,{to:"/docs/react/algorithm/diff.html"},{default:p(()=>[n("React 算法之调和算法")]),_:1}),n("中单独分析.")]),rs,s("ol",null,[us,s("li",null,[n("如果是需要删除的"),ds,n(", "),s("a",ks,[n("除了自身打上"),vs,n("之外, 还要将其添加到父节点的"),bs,n("链表中"),a(t)]),n("(正常副作用队列的处理是在"),ms,n("函数, 但是该节点(被删除)会脱离"),fs,n("树, 不会再进入"),hs,n("阶段, 所以在"),gs,n("阶段提前加入副作用队列).")])]),_s,s("p",null,[ys,n("("),s("a",ws,[n("源码地址"),a(t)]),n(")在"),Ws,n("和"),Ps,n("逻辑一致, 都是处理"),Ls,n(" 阶段已经创建出来的 "),Os,n(" 节点, 最后创建(更新)DOM 对象, 并上移副作用队列.")]),xs,s("p",null,[n("可以看到在更新过程中, 如果 DOM 属性有变化, 不会再次新建 DOM 对象, 而是设置"),Fs,n(", 等待"),Is,n("阶段处理("),s("a",Cs,[n("源码链接"),a(t)]),n(").")]),Rs,s("ul",null,[s("li",null,[Us,s("ul",null,[s("li",null,[n("本示例中"),js,n("的子节点是一个"),s("a",Hs,[n("直接文本节点"),a(t)]),n(",设置"),s("a",Ss,[n("nextChildren = null"),a(t)]),n("(源码注释的解释是不用在开辟内存去创建一个文本节点, 同时还能减少向下遍历).")]),Es])]),As]),Ts,s("ul",null,[Ns,s("li",null,[n("执行过程: "),s("ul",null,[qs,s("li",null,[n("需要注意的是, 下级子节点是一个可迭代数组, 会把"),Ds,n("一起构造出来, 同时根据需要设置"),Bs,n(". 在本例中, 下级节点有被删除的情况, 被删除的节点会被添加到父节点的副作用队列中(具体实现方式请参考"),a(o,{to:"/docs/react/algorithm/diff.html"},{default:p(()=>[n("React 算法之调和算法")]),_:1}),n(").")])])]),Ms]),Xs,s("p",null,[n("无论是"),Vs,n("或者是"),zs,n(", 当"),Qs,n("完成之后, 余下的逻辑几乎一致, 在"),a(o,{to:"/docs/react/principle-analysis/fibertree-commit.html"},{default:p(()=>[n("fiber 树渲染")]),_:1}),n("中继续讨论.")]),Ys])}const na=i(L,[["render",Gs],["__file","fibertree-update.html.vue"]]);export{na as default};
