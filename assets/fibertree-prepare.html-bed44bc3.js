import{_ as l}from"./reactfiberworkloop-c1dc2d76.js";import{_ as r,p as i,q as u,s,R as n,t as a,a2 as p,Y as o,n as c}from"./framework-e1bed10d.js";const d="/FE-Origincode/assets/code2dom-acb26af7.png",k="/FE-Origincode/assets/fibertreecreate1-progress-248550fb.png",v="/FE-Origincode/assets/fibertreecreate2-complete-a39d8682.png",m={},b=s("h1",{id:"fiber-树构造-基础准备",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fiber-树构造-基础准备","aria-hidden":"true"},"#"),n(" fiber 树构造(基础准备)")],-1),y=s("p",null,[n("在 React 运行时中, "),s("code",null,"fiber树构造"),n("位于"),s("code",null,"react-reconciler"),n("包.")],-1),f=s("code",null,"fiber树构造",-1),h=s("p",null,[s("img",{src:l,alt:""})],-1),_=s("code",null,"react-dom",-1),g=s("code",null,"fiber更新",-1),w=s("code",null,"scheduler",-1),L=s("code",null,"task",-1),R=s("li",null,[n("执行任务回调: 在内存中构造出"),s("code",null,"fiber树"),n("和"),s("code",null,"DOM"),n("对象, 也是"),s("strong",null,"fiber 树构造的重点内容"),n(".")],-1),x=s("li",null,[n("输出: 与渲染器("),s("code",null,"react-dom"),n(")交互, 渲染"),s("code",null,"DOM"),n("节点.")],-1),P=s("p",null,[s("code",null,"fiber树构造"),n("处于上述第 3 个阶段, 可以通过不同的视角来理解"),s("code",null,"fiber树构造"),n("在"),s("code",null,"React"),n("运行时中所处的位置:")],-1),C=s("li",null,[n("从"),s("code",null,"scheduler"),n("调度中心的角度来看, 它是任务队列"),s("code",null,"taskQueue"),n("中的一个具体的任务回调("),s("code",null,"task.callback"),n(").")],-1),I=s("code",null,"fiber树构造循环",-1),N=o('<p>由于<code>fiber 树构造</code>源码量比较大, 本系列根据<code>React</code>运行的<code>内存状态</code>, 分为 2 种情况来说明:</p><ol><li>初次创建: 在<code>React</code>应用首次启动时, 界面还没有渲染, 此时并不会进入对比过程, 相当于直接构造一棵全新的树.</li><li>对比更新: <code>React</code>应用启动后, 界面已经渲染. 如果再次发生更新, 创建<code>新fiber</code>之前需要和<code>旧fiber</code>进行对比. 最后构造的 fiber 树有可能是全新的, 也可能是部分更新的.</li></ol><p>无论是<code>初次创建</code>还是<code>对比更新</code>, 基础概念都是通用的, 本节将介绍这些基础知识, 为正式进入<code>fiber树构造</code>做准备.</p><h2 id="reactelement-fiber-dom-三者的关系" tabindex="-1"><a class="header-anchor" href="#reactelement-fiber-dom-三者的关系" aria-hidden="true">#</a> ReactElement, Fiber, DOM 三者的关系</h2>',4),j=s("code",null,"ReactElement",-1),E=s("code",null,"Fiber",-1),F=s("code",null,"ReactElement, Fiber, DOM",-1),S={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react/src/ReactElement.js#L126-L146",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/facebook/react/blob/v17.0.2/packages/shared/ReactElementType.js#L15",target:"_blank",rel:"noopener noreferrer"},U=s("ul",null,[s("li",null,[n("所有采用"),s("code",null,"jsx"),n("语法书写的节点, 都会被编译器转换, 最终会以"),s("code",null,"React.createElement(...)"),n("的方式, 创建出来一个与之对应的"),s("code",null,"ReactElement"),n("对象")])],-1),O={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiber.old.js#L116-L155",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactInternalTypes.js#L47-L174",target:"_blank",rel:"noopener noreferrer"},D=o("<ul><li><code>fiber对象</code>是通过<code>ReactElement</code>对象进行创建的, 多个<code>fiber对象</code>构成了一棵<code>fiber树</code>, <code>fiber树</code>是构造<code>DOM树</code>的数据模型, <code>fiber树</code>的任何改动, 最后都体现到<code>DOM树</code>.</li></ul>",1),M={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model",target:"_blank",rel:"noopener noreferrer"},q=s("ul",null,[s("li",null,[s("code",null,"DOM"),n("将文档解析为一个由节点和对象（包含属性和方法的对象）组成的结构集合, 也就是常说的"),s("code",null,"DOM树"),n(".")]),s("li",null,[s("code",null,"JavaScript"),n("可以访问和操作存储在 DOM 中的内容, 也就是操作"),s("code",null,"DOM对象"),n(", 进而触发 UI 渲染.")])],-1),H=o('<p>它们之间的关系反映了我们书写的 JSX 代码到 DOM 节点的转换过程:</p><p><img src="'+d+'" alt=""></p><p>注意:</p><ul><li>开发人员能够控制的是<code>JSX</code>, 也就是<code>ReactElement</code>对象.</li><li><code>fiber树</code>是通过<code>ReactElement</code>生成的, 如果脱离了<code>ReactElement</code>,<code>fiber树</code>也无从谈起. 所以是<code>ReactElement</code>树(不是严格的树结构, 为了方便也称为树)驱动<code>fiber树</code>.</li><li><code>fiber树</code>是<code>DOM树</code>的数据模型, <code>fiber树</code>驱动<code>DOM树</code></li></ul><p>开发人员通过编程只能控制<code>ReactElement</code>树的结构, <code>ReactElement树</code>驱动<code>fiber树</code>, <code>fiber树</code>再驱动<code>DOM树</code>, 最后展现到页面上. 所以<code>fiber树</code>的构造过程, 实际上就是<code>ReactElement</code>对象到<code>fiber</code>对象的转换过程.</p><h2 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h2>',6),B=s("code",null,"fiber树构造循环",-1),A={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js",target:"_blank",rel:"noopener noreferrer"},Q=s("code",null,"React",-1),V=s("code",null,"ReactFiberWorkLoop.js",-1),z=s("code",null,"全局变量",-1),J=s("code",null,"fiber树构造循环",-1),X={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L247-L367",target:"_blank",rel:"noopener noreferrer"},Y=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 当前React的执行栈(执行上下文)</span>
<span class="token keyword">let</span> <span class="token literal-property property">executionContext</span><span class="token operator">:</span> ExecutionContext <span class="token operator">=</span> NoContext<span class="token punctuation">;</span>

<span class="token comment">// 当前root节点</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgressRoot</span><span class="token operator">:</span> FiberRoot <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 正在处理中的fiber节点</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 正在渲染的车道(复数)</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgressRootRenderLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>

<span class="token comment">// 包含所有子节点的优先级, 是workInProgressRootRenderLanes的超集</span>
<span class="token comment">// 大多数情况下: 在工作循环整体层面会使用workInProgressRootRenderLanes, 在begin/complete阶段层面会使用 subtreeRenderLanes</span>
<span class="token keyword">let</span> <span class="token literal-property property">subtreeRenderLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
<span class="token comment">// 一个栈结构: 专门存储当前节点的 subtreeRenderLanes</span>
<span class="token keyword">const</span> <span class="token literal-property property">subtreeRenderLanesCursor</span><span class="token operator">:</span> StackCursor<span class="token operator">&lt;</span>Lanes<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">createCursor</span><span class="token punctuation">(</span>NoLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// fiber构造完后, root节点的状态: completed, errored, suspended等</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgressRootExitStatus</span><span class="token operator">:</span> RootExitStatus <span class="token operator">=</span> RootIncomplete<span class="token punctuation">;</span>
<span class="token comment">// 重大错误</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgressRootFatalError</span><span class="token operator">:</span> mixed <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 整个render期间所使用到的所有lanes</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgressRootIncludedLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
<span class="token comment">// 在render期间被跳过(由于优先级不够)的lanes: 只包括未处理的updates, 不包括被复用的fiber节点</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgressRootSkippedLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
<span class="token comment">// 在render期间被修改过的lanes</span>
<span class="token keyword">let</span> <span class="token literal-property property">workInProgressRootUpdatedLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>

<span class="token comment">// 防止无限循环和嵌套更新</span>
<span class="token keyword">const</span> <span class="token constant">NESTED_UPDATE_LIMIT</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">nestedUpdateCount</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">rootWithNestedUpdates</span><span class="token operator">:</span> FiberRoot <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">NESTED_PASSIVE_UPDATE_LIMIT</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">nestedPassiveUpdateCount</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 发起更新的时间</span>
<span class="token keyword">let</span> <span class="token literal-property property">currentEventTime</span><span class="token operator">:</span> number <span class="token operator">=</span> NoTimestamp<span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">currentEventWipLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">currentEventPendingLanes</span><span class="token operator">:</span> Lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在源码中, 大部分变量都带有英文注释(读者可自行查阅), 此处只列举了<code>fiber树构造循环</code>中最核心的变量</p><h3 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a> 执行上下文</h3>`,3),$=s("code",null,"executionContext",-1),G=s("code",null,"渲染期间",-1),K=s("code",null,"执行栈",-1),Z=s("code",null,"执行上下文",-1),nn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>type ExecutionContext <span class="token operator">=</span> number<span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> NoContext <span class="token operator">=</span> <span class="token comment">/*             */</span> <span class="token number">0b0000000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> BatchedContext <span class="token operator">=</span> <span class="token comment">/*               */</span> <span class="token number">0b0000001</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> EventContext <span class="token operator">=</span> <span class="token comment">/*                 */</span> <span class="token number">0b0000010</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> DiscreteEventContext <span class="token operator">=</span> <span class="token comment">/*         */</span> <span class="token number">0b0000100</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> LegacyUnbatchedContext <span class="token operator">=</span> <span class="token comment">/*       */</span> <span class="token number">0b0001000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> RenderContext <span class="token operator">=</span> <span class="token comment">/*                */</span> <span class="token number">0b0010000</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CommitContext <span class="token operator">=</span> <span class="token comment">/*                */</span> <span class="token number">0b0100000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上文回顾了<code>reconciler 运作流程</code>的 4 个阶段, 这 4 个阶段只是一个整体划分. 如果具体到每一次更新, 是有差异的. 比如说: <code>Legacy</code>模式下的首次更新, 不会经过<code>调度中心</code>(第 2 阶段),而是直接进入<code>fiber树构造</code>(第 3 阶段).</p>`,2),sn=s("code",null,"executionContext",-1),an=s("code",null,"reconciler 运作流程",-1),en={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L517-L619",target:"_blank",rel:"noopener noreferrer"},on=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">fiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">lane</span><span class="token operator">:</span> Lane<span class="token punctuation">,</span>
  <span class="token literal-property property">eventTime</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lane <span class="token operator">===</span> SyncLane<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// legacy或blocking模式</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> LegacyUnbatchedContext<span class="token punctuation">)</span> <span class="token operator">!==</span> NoContext <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RenderContext <span class="token operator">|</span> CommitContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> NoContext
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">performSyncWorkOnRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 后续的更新</span>
      <span class="token comment">// 进入第2阶段, 注册调度任务</span>
      <span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>executionContext <span class="token operator">===</span> NoContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果执行上下文为空, 会取消调度任务, 手动执行回调</span>
        <span class="token comment">// 进入第3阶段, 进行fiber树构造</span>
        <span class="token function">flushSyncCallbackQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// concurrent模式</span>
    <span class="token comment">// 无论是否初次更新, 都正常进入第2阶段, 注册调度任务</span>
    <span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 render 过程中, 每一个阶段都会改变<code>executionContext</code>(render 之前, 会设置<code>executionContext |= RenderContext</code>; commit 之前, 会设置<code>executionContext |= CommitContext</code>), 假设在<code>render</code>过程中再次发起更新(如在<code>UNSAFE_componentWillReceiveProps</code>生命周期中调用<code>setState</code>)则可通过<code>executionContext</code>来判断当前的<code>render</code>状态.</p><h3 id="双缓冲技术-double-buffering" tabindex="-1"><a class="header-anchor" href="#双缓冲技术-double-buffering" aria-hidden="true">#</a> 双缓冲技术(double buffering)</h3><p>在全局变量中有<code>workInProgress</code>, 还有不少以<code>workInProgress</code>来命名的变量. <code>workInProgress</code>的应用实际上就是<code>React</code>的双缓冲技术(<code>double buffering</code>).</p><p>在上文我们梳理了<code>ReactElement, Fiber, DOM三者的关系</code>, <code>fiber树</code>的构造过程, 就是把<code>ReactElement</code>转换成<code>fiber树</code>的过程. 在这个过程中, 内存里会同时存在 2 棵<code>fiber树</code>:</p><ul><li>其一: 代表当前界面的<code>fiber</code>树(已经被展示出来, 挂载到<code>fiberRoot.current</code>上). 如果是初次构造(<code>初始化渲染</code>), 页面还没有渲染, 此时界面对应的 fiber 树为空(<code>fiberRoot.current = null</code>).</li><li>其二: 正在构造的<code>fiber</code>树(即将展示出来, 挂载到<code>HostRootFiber.alternate</code>上, 正在构造的节点称为<code>workInProgress</code>). 当构造完成之后, 重新渲染页面, 最后切换<code>fiberRoot.current = workInProgress</code>, 使得<code>fiberRoot.current</code>重新指向代表当前界面的<code>fiber</code>树.</li></ul>`,6),tn=s("code",null,"fiberRoot",-1),pn=s("code",null,"HostRootFiber",-1),cn=o('<p>用图来表述<code>double buffering</code>的概念如下:</p><ol><li>构造过程中, <code>fiberRoot.current</code>指向当前界面对应的<code>fiber</code>树.</li></ol><p><img src="'+k+'" alt=""></p><ol start="2"><li>构造完成并渲染, 切换<code>fiberRoot.current</code>指针, 使其继续指向当前界面对应的<code>fiber</code>树(原来代表界面的 fiber 树, 变成了内存中).</li></ol><p><img src="'+v+'" alt=""></p><h3 id="优先级-lanes" tabindex="-1"><a class="header-anchor" href="#优先级-lanes" aria-hidden="true">#</a> 优先级 {#lanes}</h3><p>在全局变量中有不少变量都以 Lanes 命名(如<code>workInProgressRootRenderLanes</code>,<code>subtreeRenderLanes</code>其作用见上文注释), 它们都与优先级相关.</p>',7),ln=s("code",null,"React",-1),rn=s("code",null,"fiber树构造",-1),un=s("code",null,"Lane",-1),dn=s("p",null,[n("在整个"),s("code",null,"react-reconciler"),n("包中, "),s("code",null,"Lane"),n("的应用可以分为 3 个方面:")],-1),kn=s("h4",{id:"update优先级-update-lane-update-lane",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#update优先级-update-lane-update-lane","aria-hidden":"true"},"#"),n(),s("code",null,"update"),n("优先级(update.lane) {#update-lane}")],-1),vn=s("code",null,"update",-1),mn=s("code",null,"update",-1),bn=s("code",null,"update.lane",-1),yn=s("code",null,"update",-1),fn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactUpdateQueue.old.js#L152-L163",target:"_blank",rel:"noopener noreferrer"},hn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">eventTime</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">lane</span><span class="token operator">:</span> Lane</span><span class="token punctuation">)</span><span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">update</span><span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    eventTime<span class="token punctuation">,</span>
    lane<span class="token punctuation">,</span>
    <span class="token literal-property property">tag</span><span class="token operator">:</span> UpdateState<span class="token punctuation">,</span>
    <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> update<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>React</code>体系中, 有 2 种情况会创建<code>update</code>对象:</p>`,2),_n=s("code",null,"react-reconciler",-1),gn=s("code",null,"updateContainer",-1),wn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberReconciler.old.js#L250-L321",target:"_blank",rel:"noopener noreferrer"},Ln=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">element</span><span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>
  <span class="token literal-property property">container</span><span class="token operator">:</span> OpaqueRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">parentComponent</span><span class="token operator">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">{</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> container<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
  <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据当前时间, 创建一个update优先级</span>
  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lane被用于创建update对象</span>
  update<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span> element <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> lane<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Rn=s("code",null,"setState",-1),xn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L193-L288",target:"_blank",rel:"noopener noreferrer"},Pn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> classComponentUpdater <span class="token operator">=</span> <span class="token punctuation">{</span>
  isMounted<span class="token punctuation">,</span>
  <span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token parameter">inst<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fiber <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据当前时间, 创建一个update优先级</span>
    <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lane被用于创建update对象</span>
    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
    update<span class="token punctuation">.</span>payload <span class="token operator">=</span> payload<span class="token punctuation">;</span>
    <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到, 无论是<code>应用初始化</code>或者<code>发起组件更新</code>, 创建<code>update.lane</code>的逻辑都是一样的, 都是根据当前时间, 创建一个 update 优先级.</p>`,2),Cn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L392-L493",target:"_blank",rel:"noopener noreferrer"},In=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">fiber</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">{</span>
  <span class="token comment">// Special cases</span>
  <span class="token keyword">const</span> mode <span class="token operator">=</span> fiber<span class="token punctuation">.</span>mode<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> BlockingMode<span class="token punctuation">)</span> <span class="token operator">===</span> NoMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// legacy 模式</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>SyncLane<span class="token operator">:</span> Lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> ConcurrentMode<span class="token punctuation">)</span> <span class="token operator">===</span> NoMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// blocking模式</span>
    <span class="token keyword">return</span> <span class="token function">getCurrentPriorityLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> ImmediateSchedulerPriority
      <span class="token operator">?</span> <span class="token punctuation">(</span>SyncLane<span class="token operator">:</span> Lane<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token punctuation">(</span>SyncBatchedLane<span class="token operator">:</span> Lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// concurrent模式</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentEventWipLanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    currentEventWipLanes <span class="token operator">=</span> workInProgressRootIncludedLanes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> isTransition <span class="token operator">=</span> <span class="token function">requestCurrentTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> NoTransition<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isTransition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 特殊情况, 处于suspense过程中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentEventPendingLanes <span class="token operator">!==</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      currentEventPendingLanes <span class="token operator">=</span>
        mostRecentlyUpdatedRoot <span class="token operator">!==</span> <span class="token keyword">null</span>
          <span class="token operator">?</span> mostRecentlyUpdatedRoot<span class="token punctuation">.</span>pendingLanes
          <span class="token operator">:</span> NoLanes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">findTransitionLane</span><span class="token punctuation">(</span>currentEventWipLanes<span class="token punctuation">,</span> currentEventPendingLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 正常情况, 获取调度优先级</span>
  <span class="token keyword">const</span> schedulerPriority <span class="token operator">=</span> <span class="token function">getCurrentPriorityLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> lane<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> DiscreteEventContext<span class="token punctuation">)</span> <span class="token operator">!==</span> NoContext <span class="token operator">&amp;&amp;</span>
    schedulerPriority <span class="token operator">===</span> UserBlockingSchedulerPriority
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// executionContext 存在输入事件. 且调度优先级是用户阻塞性质</span>
    lane <span class="token operator">=</span> <span class="token function">findUpdateLane</span><span class="token punctuation">(</span>InputDiscreteLanePriority<span class="token punctuation">,</span> currentEventWipLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调度优先级转换为车道模型</span>
    <span class="token keyword">const</span> schedulerLanePriority <span class="token operator">=</span>
      <span class="token function">schedulerPriorityToLanePriority</span><span class="token punctuation">(</span>schedulerPriority<span class="token punctuation">)</span><span class="token punctuation">;</span>
    lane <span class="token operator">=</span> <span class="token function">findUpdateLane</span><span class="token punctuation">(</span>schedulerLanePriority<span class="token punctuation">,</span> currentEventWipLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> lane<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到<code>requestUpdateLane</code>的作用是返回一个合适的 update 优先级.</p>`,2),Nn=s("li",null,[n("legacy 模式: 返回"),s("code",null,"SyncLane")],-1),jn=s("li",null,[n("blocking 模式: 返回"),s("code",null,"SyncLane")],-1),En=s("li",null,[n("正常情况下, 根据当前的"),s("code",null,"调度优先级"),n("来生成一个"),s("code",null,"lane"),n(".")],-1),Fn=s("code",null,"TransitionLanes",-1),Sn=s("code",null,"TransitionLanes",-1),Tn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js#L548-L563",target:"_blank",rel:"noopener noreferrer"},Un=o(`<p>最后通过<code>scheduleUpdateOnFiber(current, lane, eventTime);</code>函数, 把<code>update.lane</code>正式带入到了<code>输入</code>阶段.</p><p><code>scheduleUpdateOnFiber</code>是<code>输入</code>阶段的必经函数, 在本系列的文章中已经多次提到, 此处以<code>update.lane</code>的视角分析:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">fiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">lane</span><span class="token operator">:</span> Lane<span class="token punctuation">,</span>
  <span class="token literal-property property">eventTime</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lane <span class="token operator">===</span> SyncLane<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// legacy或blocking模式</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> LegacyUnbatchedContext<span class="token punctuation">)</span> <span class="token operator">!==</span> NoContext <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RenderContext <span class="token operator">|</span> CommitContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> NoContext
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">performSyncWorkOnRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注册回调任务</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>executionContext <span class="token operator">===</span> NoContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">flushSyncCallbackQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消schedule调度 ,主动刷新回调队列,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// concurrent模式</span>
    <span class="token function">ensureRootIsScheduled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当<code>lane === SyncLane</code>也就是 legacy 或 blocking 模式中, 注册完回调任务之后(<code>ensureRootIsScheduled(root, eventTime)</code>), 如果执行上下文为空, 会取消 schedule 调度, 主动刷新回调队列<code>flushSyncCallbackQueue()</code>.</p><p>这里包含了一个热点问题(<code>setState到底是同步还是异步</code>)的标准答案:</p><ul><li>如果逻辑进入<code>flushSyncCallbackQueue</code>(<code>executionContext === NoContext</code>), 则会主动取消调度, 并刷新回调, 立即进入<code>fiber树</code>构造过程. 当执行<code>setState</code>下一行代码时, <code>fiber树</code>已经重新渲染了, 故<code>setState</code>体现为同步.</li><li>正常情况下, 不会取消<code>schedule调度</code>. 由于<code>schedule调度</code>是通过<code>MessageChannel</code>触发(宏任务), 故体现为异步.</li></ul><h4 id="渲染优先级-renderlanes" tabindex="-1"><a class="header-anchor" href="#渲染优先级-renderlanes" aria-hidden="true">#</a> <code>渲染</code>优先级(renderLanes)</h4><p>这是一个全局概念, 每一次<code>render</code>之前, 首先要确定本次<code>render</code>的优先级. 具体对应到源码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略无关代码</span>
<span class="token keyword">function</span> <span class="token function">performSyncWorkOnRoot</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> lanes<span class="token punctuation">;</span>
  <span class="token keyword">let</span> exitStatus<span class="token punctuation">;</span>
  <span class="token comment">// 获取本次\`render\`的优先级</span>
  lanes <span class="token operator">=</span> <span class="token function">getNextLanes</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  exitStatus <span class="token operator">=</span> <span class="token function">renderRootSync</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...省略无关代码</span>
<span class="token keyword">function</span> <span class="token function">performConcurrentWorkOnRoot</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取本次\`render\`的优先级</span>
  <span class="token keyword">let</span> lanes <span class="token operator">=</span> <span class="token function">getNextLanes</span><span class="token punctuation">(</span>
    root<span class="token punctuation">,</span>
    root <span class="token operator">===</span> workInProgressRoot <span class="token operator">?</span> workInProgressRootRenderLanes <span class="token operator">:</span> NoLanes<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> exitStatus <span class="token operator">=</span> <span class="token function">renderRootConcurrent</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),On=s("code",null,"Legacy",-1),Wn=s("code",null,"Concurrent",-1),Dn=s("code",null,"render",-1),Mn=s("code",null,"getNextLanes",-1),qn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js#L249-L303",target:"_blank",rel:"noopener noreferrer"},Hn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略部分代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getNextLanes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> <span class="token literal-property property">wipLanes</span><span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span><span class="token operator">:</span> Lanes <span class="token punctuation">{</span>
  <span class="token comment">// 1. check是否有等待中的lanes</span>
  <span class="token keyword">const</span> pendingLanes <span class="token operator">=</span> root<span class="token punctuation">.</span>pendingLanes<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingLanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    return_highestLanePriority <span class="token operator">=</span> NoLanePriority<span class="token punctuation">;</span>
    <span class="token keyword">return</span> NoLanes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> nextLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">let</span> nextLanePriority <span class="token operator">=</span> NoLanePriority<span class="token punctuation">;</span>
  <span class="token keyword">const</span> expiredLanes <span class="token operator">=</span> root<span class="token punctuation">.</span>expiredLanes<span class="token punctuation">;</span>
  <span class="token keyword">const</span> suspendedLanes <span class="token operator">=</span> root<span class="token punctuation">.</span>suspendedLanes<span class="token punctuation">;</span>
  <span class="token keyword">const</span> pingedLanes <span class="token operator">=</span> root<span class="token punctuation">.</span>pingedLanes<span class="token punctuation">;</span>
  <span class="token comment">// 2. check是否有已过期的lanes</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>expiredLanes <span class="token operator">!==</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nextLanes <span class="token operator">=</span> expiredLanes<span class="token punctuation">;</span>
    nextLanePriority <span class="token operator">=</span> return_highestLanePriority <span class="token operator">=</span> SyncLanePriority<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> nonIdlePendingLanes <span class="token operator">=</span> pendingLanes <span class="token operator">&amp;</span> NonIdleLanes<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nonIdlePendingLanes <span class="token operator">!==</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 非Idle任务 ...</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Idle任务 ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nextLanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> NoLanes<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nextLanes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getNextLanes</code>会根据<code>fiberRoot</code>对象上的属性(<code>expiredLanes</code>, <code>suspendedLanes</code>, <code>pingedLanes</code>等), 确定出当前最紧急的<code>lanes</code>.</p><p>此处返回的<code>lanes</code>会作为全局渲染的优先级, 用于<code>fiber树构造过程</code>中. 针对<code>fiber对象</code>或<code>update对象</code>, 只要它们的优先级(如: <code>fiber.lanes</code>和<code>update.lane</code>)比<code>渲染优先级</code>低, 都将会被忽略.</p><h4 id="fiber优先级-fiber-lanes" tabindex="-1"><a class="header-anchor" href="#fiber优先级-fiber-lanes" aria-hidden="true">#</a> <code>fiber</code>优先级(fiber.lanes)</h4>`,4),Bn=s("code",null,"fiber",-1),An=s("li",null,[s("code",null,"fiber.lanes"),n(": 代表本节点的优先级")],-1),Qn=s("code",null,"fiber.childLanes",-1),Vn=s("code",null,"FiberNode",-1),zn=s("code",null,"fiber.lanes",-1),Jn=s("code",null,"fiber.childLanes",-1),Xn=s("code",null,"NoLanes",-1),Yn=s("code",null,"fiber树构造",-1),$n=s("code",null,"renderLanes",-1),Gn=s("code",null,"fiber.lanes",-1),Kn=s("code",null,"fiber",-1),Zn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L3121-L3296",target:"_blank",rel:"noopener noreferrer"},ns=s("ul",null,[s("li",null,[n("如果全局的渲染优先级"),s("code",null,"renderLanes"),n("不包括"),s("code",null,"fiber.lanes"),n(", 证明该"),s("code",null,"fiber"),n("节点没有更新, 可以复用.")]),s("li",null,"如果不能复用, 进入创建阶段.")],-1),ss=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> updateLanes <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>lanes<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldProps <span class="token operator">=</span> current<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      oldProps <span class="token operator">!==</span> newProps <span class="token operator">||</span>
      <span class="token function">hasLegacyContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token comment">// Force a re-render if the implementation changed due to hot reload:</span>
      <span class="token punctuation">(</span>__DEV__ <span class="token operator">?</span> workInProgress<span class="token punctuation">.</span>type <span class="token operator">!==</span> current<span class="token punctuation">.</span>type <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">includesSomeLane</span><span class="token punctuation">(</span>renderLanes<span class="token punctuation">,</span> updateLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token comment">// 本\`fiber\`节点的没有更新, 可以复用, 进入bailout逻辑</span>
      <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 不能复用, 创建新的fiber节点</span>
  workInProgress<span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span> <span class="token comment">// 重置优先级为 NoLanes</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> Component <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
      <span class="token keyword">const</span> unresolvedProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
      <span class="token keyword">const</span> resolvedProps <span class="token operator">=</span>
        workInProgress<span class="token punctuation">.</span>elementType <span class="token operator">===</span> Component
          <span class="token operator">?</span> unresolvedProps
          <span class="token operator">:</span> <span class="token function">resolveDefaultProps</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> unresolvedProps<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span>
        current<span class="token punctuation">,</span>
        workInProgress<span class="token punctuation">,</span>
        Component<span class="token punctuation">,</span>
        resolvedProps<span class="token punctuation">,</span>
        <span class="token comment">// 正常情况下渲染优先级会被用于fiber树的构造过程</span>
        renderLanes<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="栈帧管理" tabindex="-1"><a class="header-anchor" href="#栈帧管理" aria-hidden="true">#</a> 栈帧管理</h3><p>在<code>React</code>源码中, 每一次执行<code>fiber树</code>构造(也就是调用<code>performSyncWorkOnRoot</code>或者<code>performConcurrentWorkOnRoot</code>函数)的过程, 都需要一些全局变量来保存状态. 在上文中已经介绍最核心的全局变量.</p>`,3),as=s("code",null,"fiber树",-1),es=s("code",null,"fiber树",-1),os=s("code",null,"fiber树",-1),ts=s("code",null,"fiber树",-1),ps=s("code",null,"独立的",-1),cs=s("code",null,"React",-1),ls=s("code",null,"stack",-1),rs=s("code",null,"栈帧",-1),is=s("code",null,"fiber树",-1),us={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1301-L1337",target:"_blank",rel:"noopener noreferrer"},ds=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">renderRootConcurrent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> <span class="token literal-property property">lanes</span><span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prevExecutionContext <span class="token operator">=</span> executionContext<span class="token punctuation">;</span>
  executionContext <span class="token operator">|=</span> RenderContext<span class="token punctuation">;</span>
  <span class="token keyword">const</span> prevDispatcher <span class="token operator">=</span> <span class="token function">pushDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果fiberRoot变动, 或者update.lane变动, 都会刷新栈帧, 丢弃上一次渲染进度</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressRoot <span class="token operator">!==</span> root <span class="token operator">||</span> workInProgressRootRenderLanes <span class="token operator">!==</span> lanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">resetRenderTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 刷新栈帧</span>
    <span class="token function">prepareFreshStack</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">startWorkOnPendingInteractions</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
刷新栈帧: 重置 FiberRoot上的全局属性 和 \`fiber树构造\`循环过程中的全局变量
*/</span>
<span class="token keyword">function</span> <span class="token function">prepareFreshStack</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> <span class="token literal-property property">lanes</span><span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 重置FiberRoot对象上的属性</span>
  root<span class="token punctuation">.</span>finishedWork <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>finishedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">const</span> timeoutHandle <span class="token operator">=</span> root<span class="token punctuation">.</span>timeoutHandle<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutHandle <span class="token operator">!==</span> noTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    root<span class="token punctuation">.</span>timeoutHandle <span class="token operator">=</span> noTimeout<span class="token punctuation">;</span>
    <span class="token function">cancelTimeout</span><span class="token punctuation">(</span>timeoutHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> interruptedWork <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>interruptedWork <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">unwindInterruptedWork</span><span class="token punctuation">(</span>interruptedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
      interruptedWork <span class="token operator">=</span> interruptedWork<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 重置全局变量</span>
  workInProgressRoot <span class="token operator">=</span> root<span class="token punctuation">;</span>
  workInProgress <span class="token operator">=</span> <span class="token function">createWorkInProgress</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 给HostRootFiber对象创建一个alternate, 并将其设置成全局 workInProgress</span>
  workInProgressRootRenderLanes <span class="token operator">=</span>
    subtreeRenderLanes <span class="token operator">=</span>
    workInProgressRootIncludedLanes <span class="token operator">=</span>
      lanes<span class="token punctuation">;</span>
  workInProgressRootExitStatus <span class="token operator">=</span> RootIncomplete<span class="token punctuation">;</span>
  workInProgressRootFatalError <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  workInProgressRootSkippedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  workInProgressRootUpdatedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  workInProgressRootPingedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意其中的<code>createWorkInProgress(root.current, null)</code>, 其参数<code>root.current</code>即<code>HostRootFiber</code>, 作用是给<code>HostRootFiber</code>创建一个<code>alternate</code>副本.<code>workInProgress</code>指针指向这个副本(即<code>workInProgress = HostRootFiber.alternate</code>), 在上文<code>double buffering</code>中分析过, <code>HostRootFiber.alternate</code>是<code>正在构造的fiber树</code>的根节点.</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节是<code>fiber树构造</code>的准备篇, 首先在宏观上从不同的视角(<code>任务调度循环</code>, <code>fiber树构造循环</code>)介绍了<code>fiber树构造</code>在<code>React</code>体系中所处的位置, 然后深入<code>react-reconciler</code>包分析<code>fiber树构造</code>过程中需要使用到的全局变量, 并解读了<code>双缓冲技术</code>和<code>优先级(车道模型)</code>的使用, 最后解释<code>栈帧管理</code>的实现细节. 有了这些基础知识, <code>fiber树构造</code>的具体实现过程会更加简单清晰.</p>`,4);function ks(vs,ms){const t=c("RouterLink"),e=c("ExternalLinkIcon");return i(),u("div",null,[b,y,s("p",null,[n("在正式解读"),f,n("之前, 再次回顾一下"),a(t,{to:"/docs/react/principle-analysis/reconciler-workflow.html"},{default:p(()=>[n("reconciler 运作流程")]),_:1}),n("的 4 个阶段:")]),h,s("ol",null,[s("li",null,[n("输入阶段: 衔接"),_,n("包, 承接"),g,n("请求(可以参考"),a(t,{to:"/docs/react/principle-analysis/bootstrap.html"},{default:p(()=>[n("React 应用的启动过程")]),_:1}),n(").")]),s("li",null,[n("注册调度任务: 与调度中心("),w,n("包)交互, 注册调度任务"),L,n(", 等待任务回调(可以参考"),a(t,{to:"/docs/react/principle-analysis/scheduler.html"},{default:p(()=>[n("React 调度原理(scheduler)")]),_:1}),n(").")]),R,x]),P,s("ul",null,[C,s("li",null,[n("从"),a(t,{to:"/docs/react/principle-analysis/workloop.html"},{default:p(()=>[n("React 工作循环")]),_:1}),n("的角度来看, 它属于"),I,n(".")])]),N,s("p",null,[n("在"),a(t,{to:"/docs/react/principle-analysis/object-structure.html"},{default:p(()=>[n("React 应用中的高频对象")]),_:1}),n("一文中, 已经介绍了"),j,n("和"),E,n("对象的数据结构. 这里我们梳理出"),F,n("这 3 种对象的关系")]),s("ol",null,[s("li",null,[s("p",null,[s("a",S,[n("ReactElement 对象"),a(e)]),n("(type 定义在"),s("a",T,[n("shared 包中"),a(e)]),n(")")]),U]),s("li",null,[s("p",null,[s("a",O,[n("fiber 对象"),a(e)]),n("(type 类型的定义在"),s("a",W,[n("ReactInternalTypes.js"),a(e)]),n("中)")]),D]),s("li",null,[s("p",null,[s("a",M,[n("DOM 对象"),a(e)]),n(": 文档对象模型")]),q])]),H,s("p",null,[n("从"),a(t,{to:"/docs/react/principle-analysis/workloop.html"},{default:p(()=>[n("React 工作循环")]),_:1}),n("的角度来看, 整个构造过程被包裹在"),B,n("中(对应源码位于"),s("a",A,[n("ReactFiberWorkLoop.js"),a(e)]),n(").")]),s("p",null,[n("在"),Q,n("运行时, "),V,n("闭包中的"),z,n("会随着"),J,n("的进行而变化, 现在查看其中重要的全局变量("),s("a",X,[n("源码链接"),a(e)]),n("):")]),Y,s("p",null,[n("在全局变量中有"),$,n(", 代表"),G,n("的"),K,n("(或叫做"),Z,n("), 它也是一个二进制表示的变量, 通过位运算进行操作(参考"),a(t,{to:"/docs/react/algorithm/bitfield.html"},{default:p(()=>[n("React 算法之位运算")]),_:1}),n("). 在源码中一共定义了 8 种执行栈:")]),nn,s("p",null,[n("事实上正是"),sn,n("在操控"),an,n("(源码体现在"),s("a",en,[n("scheduleUpdateOnFiber 函数"),a(e)]),n(").")]),on,s("p",null,[n("此处涉及到 2 个全局对象"),tn,n("和"),pn,n(", 在"),a(t,{to:"/docs/react/principle-analysis/bootstrap.html"},{default:p(()=>[n("React 应用的启动过程")]),_:1}),n("中有详细的说明.")]),cn,s("p",null,[n("在前文"),a(t,{to:"/docs/react/principle-analysis/priority.html"},{default:p(()=>[n("React 中的优先级管理")]),_:1}),n("中, 我们介绍了"),ln,n("中有 3 套优先级体系, 并了解了它们之间的关联. 现在"),rn,n("过程中, 将要深入分析车道模型"),un,n("的具体应用.")]),dn,kn,s("p",null,[n("在"),a(t,{to:"/docs/react/principle-analysis/object-structure.html#Update"},{default:p(()=>[n("React 应用中的高频对象")]),_:1}),n("一文中, 介绍过"),vn,n("对象, 它是一个环形链表. 对于单个"),mn,n("对象来讲, "),bn,n("代表它的优先级, 称之为"),yn,n("优先级.")]),s("p",null,[n("观察其构造函数("),s("a",fn,[n("源码链接"),a(e)]),n("),其优先级是由外界传入.")]),hn,s("ol",null,[s("li",null,[s("p",null,[n("应用初始化: 在"),_n,n("包中的"),gn,n("函数中("),s("a",wn,[n("源码"),a(e)]),n(")")]),Ln]),s("li",null,[s("p",null,[n("发起组件更新: 假设在 class 组件中调用"),Rn,n("("),s("a",xn,[n("源码"),a(e)]),n(")")])])]),Pn,s("p",null,[s("a",Cn,[n("requestUpdateLane"),a(e)]),n(":")]),In,s("ol",null,[Nn,jn,s("li",null,[n("concurrent 模式: "),s("ul",null,[En,s("li",null,[n("特殊情况下(处于 suspense 过程中), 会优先选择"),Fn,n("通道中的空闲通道(如果所有"),Sn,n("通道都被占用, 就取最高优先级. "),s("a",Tn,[n("源码"),a(e)]),n(").")])])])]),Un,s("p",null,[n("可以看到, 无论是"),On,n("还是"),Wn,n("模式, 在正式"),Dn,n("之前, 都会调用"),Mn,n("获取一个优先级("),s("a",qn,[n("源码链接"),a(e)]),n(").")]),Hn,s("p",null,[n("在"),a(t,{to:"/docs/react/principle-analysis/object-structure.html"},{default:p(()=>[n("React 应用中的高频对象")]),_:1}),n("一文中, 介绍过"),Bn,n("对象的数据结构. 其中有 2 个属性与优先级相关:")]),s("ol",null,[An,s("li",null,[Qn,n(": 代表子节点的优先级 从"),Vn,n("的构造函数中可以看出, "),zn,n("和"),Jn,n("的初始值都为"),Xn,n(", 在"),Yn,n("过程中, 使用全局的渲染优先级("),$n,n(")和"),Gn,n("判断"),Kn,n("节点是否更新("),s("a",Zn,[n("源码地址"),a(e)]),n("). "),ns])]),ss,s("p",null,[n("如果从单个变量来看, 它们就是一个个的全局变量. 如果将这些全局变量组合起来, 它们代表了当前"),as,n("构造的活动记录. 通过这一组全局变量, 可以还原"),es,n("构造过程(比如时间切片的实现过程(参考"),a(t,{to:"/docs/react/principle-analysis/scheduler.html#%E5%86%85%E6%A0%B8"},{default:p(()=>[n("React 调度原理")]),_:1}),n("), "),os,n("构造过程被打断之后需要还原进度, 全靠这一组全局变量). 所以每次"),ts,n("构造是一个独立的过程, 需要"),ps,n("一组全局变量, 在"),cs,n("内部把这一个独立的过程封装为一个栈帧"),ls,n("(简单来说就是每次构造都需要独立的空间. 对于"),rs,n("的深入理解, 请读者自行参考其他资料).")]),s("p",null,[n("所以在进行"),is,n("构造之前, 如果不需要恢复上一次构造进度, 都会刷新栈帧(源码在"),s("a",us,[n("prepareFreshStack 函数"),a(e)]),n(")")]),ds])}const fs=r(m,[["render",ks],["__file","fibertree-prepare.html.vue"]]);export{fs as default};
