import{_ as l,p as i,q as r,s as n,R as s,t as a,a2 as o,Y as t,n as c}from"./framework-e1bed10d.js";const u="/FE-Origincode/assets/dispatch-event-878ac61e.png",d={},k=t('<h1 id="react-合成事件" tabindex="-1"><a class="header-anchor" href="#react-合成事件" aria-hidden="true">#</a> React 合成事件</h1><h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>从<code>v17.0.0</code>开始, React 不会再将事件处理添加到 <code>document</code> 上, 而是将事件处理添加到渲染 React 树的根 DOM 容器中.</p><p>引入官方提供的图片:</p><p><img src="https://zh-hans.reactjs.org/static/bb4b10114882a50090b8ff61b3c4d0fd/1e088/react_17_delegation.png" alt=""></p>',5),v=n("code",null,"v17.0.0",-1),m=n("code",null,"document",-1),b=n("code",null,"根 DOM 容器",-1),h=n("code",null,"事件委托(代理)",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks/Events",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"react",-1),_=n("code",null,"事件委托",-1),f={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/client/ReactDOMComponent.js#L530-L616",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"scroll",-1),w=n("code",null,"load",-1),L={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L295-L314",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"上述特殊事件最大的不同是监听的 DOM 元素不同, 除此之外, 其他地方的实现与正常事件大体一致.",-1),N=n("p",null,[s("本节讨论的是可以被"),n("code",null,"根 DOM 容器"),s("代理的正常事件.")],-1),C=n("h2",{id:"事件绑定",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件绑定","aria-hidden":"true"},"#"),s(" 事件绑定")],-1),D=n("code",null,"React",-1),T={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/client/ReactDOMRoot.js#L120-L169",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createRootImpl</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">container</span><span class="token operator">:</span> Container<span class="token punctuation">,</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> RootTag<span class="token punctuation">,</span>
  <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">|</span> RootOptions<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 省略无关代码</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableEagerRootListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rootContainerElement <span class="token operator">=</span>
      container<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token constant">COMMENT_NODE</span> <span class="token operator">?</span> container<span class="token punctuation">.</span>parentNode <span class="token operator">:</span> container<span class="token punctuation">;</span>
    <span class="token function">listenToAllSupportedEvents</span><span class="token punctuation">(</span>rootContainerElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ... 省略无关代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L316-L349",target:"_blank",rel:"noopener noreferrer"},O=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ... 省略无关代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">listenToAllSupportedEvents</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">rootContainerElement</span><span class="token operator">:</span> EventTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableEagerRootListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 节流优化, 保证全局注册只被调用一次</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rootContainerElement<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">[</span>listeningMarker<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span>rootContainerElement<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">[</span>listeningMarker<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 遍历allNativeEvents 监听冒泡和捕获阶段的事件</span>
    allNativeEvents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">domEventName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nonDelegatedEvents<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>domEventName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">listenToNativeEvent</span><span class="token punctuation">(</span>
          domEventName<span class="token punctuation">,</span>
          <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 冒泡阶段监听</span>
          <span class="token punctuation">(</span><span class="token punctuation">(</span>rootContainerElement<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Element<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">listenToNativeEvent</span><span class="token punctuation">(</span>
        domEventName<span class="token punctuation">,</span>
        <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 捕获阶段监听</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span>rootContainerElement<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> Element<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心逻辑:</p>`,2),x=n("li",null,"节流优化, 保证全局注册只被调用一次.",-1),F=n("code",null,"allNativeEvents",-1),M=n("code",null,"listenToNativeEvent",-1),R=n("code",null,"allNativeEvents",-1),I=n("code",null,"DOMPluginEventSystem.js",-1),A={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L89-L93",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L351-L412",target:"_blank",rel:"noopener noreferrer"},W=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ... 省略无关代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">listenToNativeEvent</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">domEventName</span><span class="token operator">:</span> DOMEventName<span class="token punctuation">,</span>
  <span class="token literal-property property">isCapturePhaseListener</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">rootContainerElement</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">targetElement</span><span class="token operator">:</span> Element <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  eventSystemFlags<span class="token operator">?</span><span class="token operator">:</span> EventSystemFlags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> rootContainerElement<span class="token punctuation">;</span>

  <span class="token keyword">const</span> listenerSet <span class="token operator">=</span> <span class="token function">getEventListenerSet</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> listenerSetKey <span class="token operator">=</span> <span class="token function">getListenerSetKey</span><span class="token punctuation">(</span>
    domEventName<span class="token punctuation">,</span>
    isCapturePhaseListener<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 利用set数据结构, 保证相同的事件类型只会被注册一次.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>listenerSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>listenerSetKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCapturePhaseListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      eventSystemFlags <span class="token operator">|=</span> <span class="token constant">IS_CAPTURE_PHASE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 注册事件监听</span>
    <span class="token function">addTrappedEventListener</span><span class="token punctuation">(</span>
      target<span class="token punctuation">,</span>
      domEventName<span class="token punctuation">,</span>
      eventSystemFlags<span class="token punctuation">,</span>
      isCapturePhaseListener<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    listenerSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listenerSetKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L468-L560",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ... 省略无关代码</span>
<span class="token keyword">function</span> <span class="token function">addTrappedEventListener</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">targetContainer</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">domEventName</span><span class="token operator">:</span> DOMEventName<span class="token punctuation">,</span>
  <span class="token literal-property property">eventSystemFlags</span><span class="token operator">:</span> EventSystemFlags<span class="token punctuation">,</span>
  <span class="token literal-property property">isCapturePhaseListener</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  isDeferredListenerForLegacyFBSupport<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 构造listener</span>
  <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token function">createEventListenerWrapperWithPriority</span><span class="token punctuation">(</span>
    targetContainer<span class="token punctuation">,</span>
    domEventName<span class="token punctuation">,</span>
    eventSystemFlags<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> unsubscribeListener<span class="token punctuation">;</span>
  <span class="token comment">// 2. 注册事件监听</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isCapturePhaseListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    unsubscribeListener <span class="token operator">=</span> <span class="token function">addEventCaptureListener</span><span class="token punctuation">(</span>
      targetContainer<span class="token punctuation">,</span>
      domEventName<span class="token punctuation">,</span>
      listener<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    unsubscribeListener <span class="token operator">=</span> <span class="token function">addEventBubbleListener</span><span class="token punctuation">(</span>
      targetContainer<span class="token punctuation">,</span>
      domEventName<span class="token punctuation">,</span>
      listener<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册原生事件 冒泡</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addEventBubbleListener</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">eventType</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">listener</span><span class="token operator">:</span> Function<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> listener<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 注册原生事件 捕获</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addEventCaptureListener</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">eventType</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">listener</span><span class="token operator">:</span> Function<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> listener<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从<code>listenToAllSupportedEvents</code>开始, 调用链路比较长, 最后调用<code>addEventBubbleListener</code>和<code>addEventCaptureListener</code>监听了原生事件.</p><h3 id="原生-listener" tabindex="-1"><a class="header-anchor" href="#原生-listener" aria-hidden="true">#</a> 原生 listener</h3><p>在注册原生事件的过程中, 需要重点关注一下监听函数, 即<code>listener</code>函数. 它实现了把原生事件派发到<code>react</code>体系之内, 非常关键.</p><blockquote><p>比如点击 DOM 触发原生事件, 原生事件最后会被派发到<code>react</code>内部的<code>onClick</code>函数. <code>listener</code>函数就是这个<code>由外至内</code>的关键环节.</p></blockquote><p><code>listener</code>是通过<code>createEventListenerWrapperWithPriority</code>函数产生:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createEventListenerWrapperWithPriority</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">targetContainer</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">domEventName</span><span class="token operator">:</span> DOMEventName<span class="token punctuation">,</span>
  <span class="token literal-property property">eventSystemFlags</span><span class="token operator">:</span> EventSystemFlags<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  <span class="token comment">// 1. 根据优先级设置 listenerWrapper</span>
  <span class="token keyword">const</span> eventPriority <span class="token operator">=</span> <span class="token function">getEventPriorityForPluginSystem</span><span class="token punctuation">(</span>domEventName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> listenerWrapper<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>eventPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">DiscreteEvent</span><span class="token operator">:</span>
      listenerWrapper <span class="token operator">=</span> dispatchDiscreteEvent<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">UserBlockingEvent</span><span class="token operator">:</span>
      listenerWrapper <span class="token operator">=</span> dispatchUserBlockingUpdate<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ContinuousEvent</span><span class="token operator">:</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      listenerWrapper <span class="token operator">=</span> dispatchEvent<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 2. 返回 listenerWrapper</span>
  <span class="token keyword">return</span> <span class="token function">listenerWrapper</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    domEventName<span class="token punctuation">,</span>
    eventSystemFlags<span class="token punctuation">,</span>
    targetContainer<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到, 不同的<code>domEventName</code>调用<code>getEventPriorityForPluginSystem</code>后返回不同的优先级, 最终会有 3 种情况:</p>`,8),H=n("code",null,"DiscreteEvent",-1),z=n("code",null,"click, keyDown, input",-1),K={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMEventProperties.js#L45-L80",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"listener",-1),q={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/ReactDOMEventListener.js#L121-L142",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"UserBlockingEvent",-1),Y=n("code",null,"drag, scroll",-1),G={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMEventProperties.js#L100-L116",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"listener",-1),Z={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/ReactDOMEventListener.js#L144-L180",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"ContinuousEvent",-1),nn=n("code",null,"animation, load",-1),sn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMEventProperties.js#L119-L145",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"listener",-1),en={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/ReactDOMEventListener.js#L182-L271",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"listener",-1),pn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/ReactDOMEventListener.js#L182-L271",target:"_blank",rel:"noopener noreferrer"},on=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略无关代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">domEventName</span><span class="token operator">:</span> DOMEventName<span class="token punctuation">,</span>
  <span class="token literal-property property">eventSystemFlags</span><span class="token operator">:</span> EventSystemFlags<span class="token punctuation">,</span>
  <span class="token literal-property property">targetContainer</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">nativeEvent</span><span class="token operator">:</span> AnyNativeEvent<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> blockedOn <span class="token operator">=</span> <span class="token function">attemptToDispatchEvent</span><span class="token punctuation">(</span>
    domEventName<span class="token punctuation">,</span>
    eventSystemFlags<span class="token punctuation">,</span>
    targetContainer<span class="token punctuation">,</span>
    nativeEvent<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件触发" tabindex="-1"><a class="header-anchor" href="#事件触发" aria-hidden="true">#</a> 事件触发</h2><p>当原生事件触发之后, 首先会进入到<code>dispatchEvent</code>这个回调函数. 而<code>dispatchEvent</code>函数是<code>react</code>事件体系中最关键的函数, 其调用链路较长, 核心步骤如图所示:</p><p><img src="`+u+'" alt=""></p><p>重点关注其中 3 个核心环节:</p><ol><li><code>attemptToDispatchEvent</code></li><li><code>SimpleEventPlugin.extractEvents</code></li><li><code>processDispatchQueue</code></li></ol><h3 id="关联-fiber" tabindex="-1"><a class="header-anchor" href="#关联-fiber" aria-hidden="true">#</a> 关联 fiber</h3>',7),cn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/ReactDOMEventListener.js#L274-L331",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"fiber树",-1),rn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">attemptToDispatchEvent</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">domEventName</span><span class="token operator">:</span> DOMEventName<span class="token punctuation">,</span>
  <span class="token literal-property property">eventSystemFlags</span><span class="token operator">:</span> EventSystemFlags<span class="token punctuation">,</span>
  <span class="token literal-property property">targetContainer</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">nativeEvent</span><span class="token operator">:</span> AnyNativeEvent<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> Container <span class="token operator">|</span> SuspenseInstance <span class="token punctuation">{</span>
  <span class="token comment">// ...省略无关代码</span>

  <span class="token comment">// 1. 定位原生DOM节点</span>
  <span class="token keyword">const</span> nativeEventTarget <span class="token operator">=</span> <span class="token function">getEventTarget</span><span class="token punctuation">(</span>nativeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 获取与DOM节点对应的fiber节点</span>
  <span class="token keyword">let</span> targetInst <span class="token operator">=</span> <span class="token function">getClosestInstanceFromNode</span><span class="token punctuation">(</span>nativeEventTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 3. 通过插件系统, 派发事件</span>
  <span class="token function">dispatchEventForPluginEventSystem</span><span class="token punctuation">(</span>
    domEventName<span class="token punctuation">,</span>
    eventSystemFlags<span class="token punctuation">,</span>
    nativeEvent<span class="token punctuation">,</span>
    targetInst<span class="token punctuation">,</span>
    targetContainer<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心逻辑:</p><ol><li>定位原生 DOM 节点: 调用<code>getEventTarget</code></li><li>获取与 DOM 节点对应的 fiber 节点: 调用<code>getClosestInstanceFromNode</code></li><li>通过插件系统, 派发事件: 调用 <code>dispatchEventForPluginEventSystem</code></li></ol><h3 id="收集-fiber-上的-listener" tabindex="-1"><a class="header-anchor" href="#收集-fiber-上的-listener" aria-hidden="true">#</a> 收集 fiber 上的 listener</h3><p><code>dispatchEvent</code>函数的调用链路中, 通过不同的插件, 处理不同的事件. 其中最常见的事件都会由<code>SimpleEventPlugin.extractEvents</code>进行处理:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">extractEvents</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">dispatchQueue</span><span class="token operator">:</span> DispatchQueue<span class="token punctuation">,</span>
  <span class="token literal-property property">domEventName</span><span class="token operator">:</span> DOMEventName<span class="token punctuation">,</span>
  <span class="token literal-property property">targetInst</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">nativeEvent</span><span class="token operator">:</span> AnyNativeEvent<span class="token punctuation">,</span>
  <span class="token literal-property property">nativeEventTarget</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> EventTarget<span class="token punctuation">,</span>
  <span class="token literal-property property">eventSystemFlags</span><span class="token operator">:</span> EventSystemFlags<span class="token punctuation">,</span>
  <span class="token literal-property property">targetContainer</span><span class="token operator">:</span> EventTarget<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> reactName <span class="token operator">=</span> topLevelEventsToReactNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>domEventName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>reactName <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> SyntheticEventCtor <span class="token operator">=</span> SyntheticEvent<span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token literal-property property">reactEventType</span><span class="token operator">:</span> string <span class="token operator">=</span> domEventName<span class="token punctuation">;</span>

  <span class="token keyword">const</span> inCapturePhase <span class="token operator">=</span> <span class="token punctuation">(</span>eventSystemFlags <span class="token operator">&amp;</span> <span class="token constant">IS_CAPTURE_PHASE</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> accumulateTargetOnly <span class="token operator">=</span> <span class="token operator">!</span>inCapturePhase <span class="token operator">&amp;&amp;</span> domEventName <span class="token operator">===</span> <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// 1. 收集所有监听该事件的函数.</span>
  <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token function">accumulateSinglePhaseListeners</span><span class="token punctuation">(</span>
    targetInst<span class="token punctuation">,</span>
    reactName<span class="token punctuation">,</span>
    nativeEvent<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
    inCapturePhase<span class="token punctuation">,</span>
    accumulateTargetOnly<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2. 构造合成事件, 添加到派发队列</span>
    <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyntheticEventCtor</span><span class="token punctuation">(</span>
      reactName<span class="token punctuation">,</span>
      reactEventType<span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      nativeEvent<span class="token punctuation">,</span>
      nativeEventTarget<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    dispatchQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> event<span class="token punctuation">,</span> listeners <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心逻辑:</p>`,7),un=n("p",null,[s("收集所有"),n("code",null,"listener"),s("回调")],-1),dn=n("li",null,[n("p",null,[s("这里的是"),n("code",null,"fiber.memoizedProps.onClick/onClickCapture"),s("等绑定在"),n("code",null,"fiber"),s("节点上的回调函数")])],-1),kn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L712-L803",target:"_blank",rel:"noopener noreferrer"},vn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">accumulateSinglePhaseListeners</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">targetFiber</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">reactName</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">nativeEventType</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">inCapturePhase</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">accumulateTargetOnly</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>DispatchListener<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> captureName <span class="token operator">=</span> reactName <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> reactName <span class="token operator">+</span> <span class="token string">&#39;Capture&#39;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> reactEventName <span class="token operator">=</span> inCapturePhase <span class="token operator">?</span> captureName <span class="token operator">:</span> reactName<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">listeners</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>DispatchListener<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> instance <span class="token operator">=</span> targetFiber<span class="token punctuation">;</span>
  <span class="token keyword">let</span> lastHostComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// 从targetFiber开始, 向上遍历, 直到 root 为止</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>instance <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> stateNode<span class="token punctuation">,</span> tag <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">;</span>
    <span class="token comment">// 当节点类型是HostComponent时(如: div, span, button等类型)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">===</span> HostComponent <span class="token operator">&amp;&amp;</span> stateNode <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      lastHostComponent <span class="token operator">=</span> stateNode<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>reactEventName <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取标准的监听函数 (如onClick , onClickCapture等)</span>
        <span class="token keyword">const</span> listener <span class="token operator">=</span> <span class="token function">getListener</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> reactEventName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>listener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
            <span class="token function">createDispatchListener</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> lastHostComponent<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 如果只收集目标节点, 则不用向上遍历, 直接退出</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>accumulateTargetOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    instance <span class="token operator">=</span> instance<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> listeners<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),mn=n("li",null,[n("p",null,[s("构造合成事件("),n("code",null,"SyntheticEvent"),s("), 添加到派发队列("),n("code",null,"dispatchQueue"),s(")")])],-1),bn=n("h3",{id:"构造合成事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#构造合成事件","aria-hidden":"true"},"#"),s(" 构造合成事件")],-1),hn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/SyntheticEvent.js#L152",target:"_blank",rel:"noopener noreferrer"},yn=n("code",null,"react",-1),gn=n("code",null,"stopPropagation",-1),_n=n("code",null,"preventDefault",-1),fn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/SyntheticEvent.js#L28-L136",target:"_blank",rel:"noopener noreferrer"},En=t('<p>此处我们需要知道, 在<code>Plugin.extractEvents</code>过程中, 遍历<code>fiber树</code>找到<code>listener</code>之后, 就会创建<code>SyntheticEvent</code>, 加入到<code>dispatchQueue</code>中, 等待派发.</p><h3 id="执行派发" tabindex="-1"><a class="header-anchor" href="#执行派发" aria-hidden="true">#</a> 执行派发</h3>',2),wn=n("code",null,"extractEvents",-1),Ln={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L260-L272",target:"_blank",rel:"noopener noreferrer"},Sn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">processDispatchQueue</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">dispatchQueue</span><span class="token operator">:</span> DispatchQueue<span class="token punctuation">,</span>
  <span class="token literal-property property">eventSystemFlags</span><span class="token operator">:</span> EventSystemFlags<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inCapturePhase <span class="token operator">=</span> <span class="token punctuation">(</span>eventSystemFlags <span class="token operator">&amp;</span> <span class="token constant">IS_CAPTURE_PHASE</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dispatchQueue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> event<span class="token punctuation">,</span> listeners <span class="token punctuation">}</span> <span class="token operator">=</span> dispatchQueue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">processDispatchQueueItemsInOrder</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> inCapturePhase<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...省略无关代码</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">processDispatchQueueItemsInOrder</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">event</span><span class="token operator">:</span> ReactSyntheticEvent<span class="token punctuation">,</span>
  <span class="token literal-property property">dispatchListeners</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>DispatchListener<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">inCapturePhase</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> previousInstance<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inCapturePhase<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. capture事件: 倒序遍历listeners</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> dispatchListeners<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> instance<span class="token punctuation">,</span> currentTarget<span class="token punctuation">,</span> listener <span class="token punctuation">}</span> <span class="token operator">=</span> dispatchListeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!==</span> previousInstance <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">isPropagationStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">executeDispatch</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
      previousInstance <span class="token operator">=</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 2. bubble事件: 顺序遍历listeners</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dispatchListeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> instance<span class="token punctuation">,</span> currentTarget<span class="token punctuation">,</span> listener <span class="token punctuation">}</span> <span class="token operator">=</span> dispatchListeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!==</span> previousInstance <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">isPropagationStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">executeDispatch</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> currentTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>
      previousInstance <span class="token operator">=</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Nn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L233-L258",target:"_blank",rel:"noopener noreferrer"},Cn=n("code",null,"dispatchListeners",-1),Dn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L222-L231",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"fiber",-1),jn=n("code",null,"listener",-1),Pn=t('<p>在<code>processDispatchQueueItemsInOrder</code>函数中, 根据<code>捕获(capture)</code>或<code>冒泡(bubble)</code>的不同, 采取了不同的遍历方式:</p><ol><li><code>capture</code>事件: <code>从上至下</code>调用<code>fiber树</code>中绑定的回调函数, 所以<code>倒序</code>遍历<code>dispatchListeners</code>.</li><li><code>bubble</code>事件: <code>从下至上</code>调用<code>fiber树</code>中绑定的回调函数, 所以<code>顺序</code>遍历<code>dispatchListeners</code>.</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',3),On={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/SyntheticEvent.js#L152",target:"_blank",rel:"noopener noreferrer"},xn=n("code",null,"原生事件",-1),Fn=n("code",null,"fiber树",-1),Mn=n("code",null,"react",-1),Rn=n("code",null,"原生事件",-1),In=n("code",null,"fiber树",-1),An=t("<p>从实现上讲, 主要分为 3 步:</p><ol><li>监听原生事件: 对齐<code>DOM元素</code>和<code>fiber元素</code></li><li>收集<code>listeners</code>: 遍历<code>fiber树</code>, 收集所有监听本事件的<code>listener</code>函数.</li><li>派发合成事件: 构造合成事件, 遍历<code>listeners</code>进行派发.</li></ol>",2);function Qn(Wn,Bn){const e=c("ExternalLinkIcon"),p=c("RouterLink");return i(),r("div",null,[k,n("p",null,[s("图中清晰的展示了"),v,s("的改动, 无论是在"),m,s("还是"),b,s("上监听事件, 都可以归为"),h,s("("),n("a",y,[s("mdn"),a(e)]),s(").")]),n("p",null,[s("注意: "),g,s("的事件体系, 不是全部都通过"),_,s("来实现的. 有一些"),n("a",f,[s("特殊情况"),a(e)]),s(", 是直接绑定到对应 DOM 元素上的(如:"),E,s(", "),w,s("), 它们都通过"),n("a",L,[s("listenToNonDelegatedEvent"),a(e)]),s("函数进行绑定.")]),S,N,C,n("p",null,[s("在前文"),a(p,{to:"/docs/react/principle-analysis/bootstrap.html#create-global-obj"},{default:o(()=>[s("React 应用的启动过程")]),_:1}),s("中介绍了"),D,s("在启动时会创建全局对象, 其中在创建"),a(p,{to:"/docs/react/principle-analysis/bootstrap.html#create-root-impl"},{default:o(()=>[s("fiberRoot")]),_:1}),s("对象时, 调用"),n("a",T,[s("createRootImpl"),a(e)]),s(":")]),j,n("p",null,[n("a",P,[s("listenToAllSupportedEvents"),a(e)]),s("函数, 实际上完成了事件代理:")]),O,n("ol",null,[x,n("li",null,[s("遍历"),F,s(", 调用"),M,s("监听冒泡和捕获阶段的事件. "),n("ul",null,[n("li",null,[R,s("包括了大量的原生事件名称, 它是在"),I,s("中"),n("a",A,[s("被初始化"),a(e)])])])])]),n("p",null,[n("a",Q,[s("listenToNativeEvent"),a(e)]),s(":")]),W,n("p",null,[n("a",B,[s("addTrappedEventListener"),a(e)]),s(":")]),U,n("ol",null,[n("li",null,[H,s(": 优先级最高, 包括"),z,s("等事件, "),n("a",K,[s("源码"),a(e)]),n("ul",null,[n("li",null,[s("对应的"),V,s("是"),n("a",q,[s("dispatchDiscreteEvent"),a(e)])])])]),n("li",null,[J,s(": 优先级适中, 包括"),Y,s("等事件, "),n("a",G,[s("源码"),a(e)]),n("ul",null,[n("li",null,[s("对应的"),X,s("是"),n("a",Z,[s("dispatchUserBlockingUpdate"),a(e)])])])]),n("li",null,[$,s(": 优先级最低,包括"),nn,s("等事件, "),n("a",sn,[s("源码"),a(e)]),n("ul",null,[n("li",null,[s("对应的"),an,s("是"),n("a",en,[s("dispatchEvent"),a(e)])])])])]),n("p",null,[s("这 3 种"),tn,s("实际上都是对"),n("a",pn,[s("dispatchEvent"),a(e)]),s("的包装:")]),on,n("p",null,[n("a",cn,[s("attemptToDispatchEvent"),a(e)]),s("把原生事件和"),ln,s("关联起来.")]),rn,n("ol",null,[n("li",null,[un,n("ul",null,[dn,n("li",null,[n("p",null,[s("具体逻辑在"),n("a",kn,[s("accumulateSinglePhaseListeners"),a(e)]),s(":")]),vn])])]),mn]),bn,n("p",null,[n("a",hn,[s("SyntheticEvent"),a(e)]),s(", 是"),yn,s("内部创建的一个对象, 是原生事件的跨浏览器包装器, 拥有和浏览器原生事件相同的接口("),gn,s(","),_n,s("), 抹平不同浏览器 api 的差异, 兼容性好.")]),n("p",null,[s("具体的构造过程并不复杂, 可以直接"),n("a",fn,[s("查看源码"),a(e)]),s(".")]),En,n("p",null,[wn,s("完成之后, 逻辑来到"),n("a",Ln,[s("processDispatchQueue"),a(e)]),s(", 终于要真正执行派发了.")]),Sn,n("p",null,[s("在"),n("a",Nn,[s("processDispatchQueueItemsInOrder"),a(e)]),s("遍历"),Cn,s("数组, 执行"),n("a",Dn,[s("executeDispatch"),a(e)]),s("派发事件, 在"),Tn,s("节点上绑定的"),jn,s("函数被执行.")]),Pn,n("p",null,[s("从架构上来讲, "),n("a",On,[s("SyntheticEvent"),a(e)]),s("打通了从外部"),xn,s("到内部"),Fn,s("的交互渠道, 使得"),Mn,s("能够感知到浏览器提供的"),Rn,s(", 进而做出不同的响应, 修改"),In,s(", 变更视图等.")]),An])}const Hn=l(d,[["render",Qn],["__file","synthetic-event.html.vue"]]);export{Hn as default};
