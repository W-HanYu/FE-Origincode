import{_ as p}from"./reactfiberworkloop-c1dc2d76.js";import{_ as i,p as l,q as d,s as n,R as s,t as e,a2 as r,Y as o,n as c}from"./framework-e1bed10d.js";const u={},k=o('<h1 id="react-中的优先级管理" tabindex="-1"><a class="header-anchor" href="#react-中的优先级管理" aria-hidden="true">#</a> React 中的优先级管理</h1><blockquote><p><code>React</code>内部对于<code>优先级</code>的管理, 根据功能的不同分为<code>LanePriority</code>, <code>SchedulerPriority</code>, <code>ReactPriorityLevel</code>3 种类型. 本文基于<code>react@17.0.2</code>, 梳理源码中的优先级管理体系.</p></blockquote><p><code>React</code>是一个声明式, 高效且灵活的用于构建用户界面的 JavaScript 库. React 团队一直致力于实现高效渲染, 其中有 2 个十分有名的演讲:</p>',3),v={href:"http://conf2017.reactjs.org/speakers/lin",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"fiber",-1),h=n("code",null,"可中断渲染",-1),b={href:"https://zh-hans.reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"time slicing",-1),_=n("code",null,"suspense",-1),L=n("p",null,[s("演讲中所展示的"),n("code",null,"可中断渲染"),s(","),n("code",null,"时间切片(time slicing)"),s(","),n("code",null,"异步渲染(suspense)"),s("等特性, 在源码中得以实现都依赖于"),n("code",null,"优先级管理"),s(".")],-1),P=n("code",null,"React@17.0.2",-1),f=n("code",null,"2套优先级体系",-1),g=n("code",null,"1套转换体系",-1),w=n("p",null,[n("img",{src:p,alt:""})],-1),x=n("p",null,[n("code",null,"React"),s("内部对于"),n("code",null,"优先级"),s("的管理, 贯穿运作流程的 4 个阶段(从输入到输出), 根据其功能的不同, 可以分为 3 种类型:")],-1),R=n("code",null,"fiber",-1),j=n("code",null,"LanePriority",-1),S=n("code",null,"react-reconciler",-1),I={href:"https://github.com/facebook/react/pull/18796",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"Lane(车道模型)",-1),B=n("li",null,[s("调度优先级("),n("code",null,"SchedulerPriority"),s("): 位于"),n("code",null,"scheduler"),s("包.")],-1),N=n("code",null,"ReactPriorityLevel",-1),F=n("code",null,"react-reconciler",-1),O={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/SchedulerWithReactIntegration.old.js",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"SchedulerWithReactIntegration.js",-1),q=o('<h2 id="预备知识" tabindex="-1"><a class="header-anchor" href="#预备知识" aria-hidden="true">#</a> 预备知识</h2><p>在深入分析 3 种优先级之前, 为了深入理解<code>LanePriority</code>, 需要先了解<code>Lane</code>, 这是<code>react@17.0.0</code>的新特性.</p><h3 id="lane-车道模型" tabindex="-1"><a class="header-anchor" href="#lane-车道模型" aria-hidden="true">#</a> Lane (车道模型)</h3><blockquote><p>英文单词<code>lane</code>翻译成中文表示&quot;车道, 航道&quot;的意思, 所以很多文章都将<code>Lanes</code>模型称为<code>车道模型</code></p></blockquote>',4),U=n("code",null,"Lane",-1),W={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"Lane",-1),E={href:"https://github.com/facebook/react/pull/18796",target:"_blank",rel:"noopener noreferrer"},V=o(`<li><p><code>Lane</code>类型被定义为二进制变量, 利用了位掩码的特性, 在频繁运算的时候占用内存少, 计算速度快.</p><ul><li><code>Lane</code>和<code>Lanes</code>就是单数和复数的关系, 代表单个任务的定义为<code>Lane</code>, 代表多个任务的定义为<code>Lanes</code></li></ul></li><li><p><code>Lane</code>是对于<code>expirationTime</code>的重构, 以前使用<code>expirationTime</code>表示的字段, 都改为了<code>lane</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  renderExpirationtime <span class="token operator">-</span><span class="token operator">&gt;</span> renderLanes
  update<span class="token punctuation">.</span>expirationTime <span class="token operator">-</span><span class="token operator">&gt;</span> update<span class="token punctuation">.</span>lane
  fiber<span class="token punctuation">.</span>expirationTime <span class="token operator">-</span><span class="token operator">&gt;</span> fiber<span class="token punctuation">.</span>lanes
  fiber<span class="token punctuation">.</span>childExpirationTime <span class="token operator">-</span><span class="token operator">&gt;</span> fiber<span class="token punctuation">.</span>childLanes
  root<span class="token punctuation">.</span>firstPendingTime and root<span class="token punctuation">.</span>lastPendingTime <span class="token operator">-</span><span class="token operator">&gt;</span> fiber<span class="token punctuation">.</span>pendingLanes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),D=n("p",null,[s("使用"),n("code",null,"Lanes"),s("模型相比"),n("code",null,"expirationTime"),s("模型的优势:")],-1),z=o(`<li><p><code>Lanes</code>把任务优先级从批量任务中分离出来, 可以更方便的判断单个任务与批量任务的优先级是否重叠.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 判断: 单task与batchTask的优先级是否重叠</span>
<span class="token comment">//1. 通过expirationTime判断</span>
<span class="token keyword">const</span> isTaskIncludedInBatch <span class="token operator">=</span> priorityOfTask <span class="token operator">&gt;=</span> priorityOfBatch<span class="token punctuation">;</span>
<span class="token comment">//2. 通过Lanes判断</span>
<span class="token keyword">const</span> isTaskIncludedInBatch <span class="token operator">=</span> <span class="token punctuation">(</span>task <span class="token operator">&amp;</span> batchOfTasks<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 当同时处理一组任务, 该组内有多个任务, 且每个任务的优先级不一致</span>
<span class="token comment">// 1. 如果通过expirationTime判断. 需要维护一个范围(在Lane重构之前, 源码中就是这样比较的)</span>
<span class="token keyword">const</span> isTaskIncludedInBatch <span class="token operator">=</span>
  taskPriority <span class="token operator">&lt;=</span> highestPriorityInRange <span class="token operator">&amp;&amp;</span>
  taskPriority <span class="token operator">&gt;=</span> lowestPriorityInRange<span class="token punctuation">;</span>
<span class="token comment">//2. 通过Lanes判断</span>
<span class="token keyword">const</span> isTaskIncludedInBatch <span class="token operator">=</span> <span class="token punctuation">(</span>task <span class="token operator">&amp;</span> batchOfTasks<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),J=n("p",null,[n("code",null,"Lanes"),s("使用单个 32 位二进制变量即可代表多个不同的任务, 也就是说一个变量即可代表一个组("),n("code",null,"group"),s("), 如果要在一个 group 中分离出单个 task, 非常容易.")],-1),H=n("code",null,"expirationTime",-1),Q={href:"https://zh-hans.reactjs.org/docs/concurrent-mode-suspense.html",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"A > B > C",-1),G=n("code",null,"CPU密集型",-1),K=n("code",null,"IO密集型",-1),M=n("code",null,"A(cpu) > B(IO) > C(cpu)",-1),X=n("code",null,"B",-1),Z=n("code",null,"A和C",-1),$=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从group中删除或增加task</span>

<span class="token comment">//1. 通过expirationTime实现</span>
<span class="token comment">// 0) 维护一个链表, 按照单个task的优先级顺序进行插入</span>
<span class="token comment">// 1) 删除单个task(从链表中删除一个元素)</span>
task<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> task<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token comment">// 2) 增加单个task(需要对比当前task的优先级, 插入到链表正确的位置上)</span>
<span class="token keyword">let</span> current <span class="token operator">=</span> queue<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>expirationTime <span class="token operator">&gt;=</span> current<span class="token punctuation">.</span>expirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
task<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
current<span class="token punctuation">.</span>next <span class="token operator">=</span> task<span class="token punctuation">;</span>
<span class="token comment">// 3) 比较task是否在group中</span>
<span class="token keyword">const</span> isTaskIncludedInBatch <span class="token operator">=</span>
  taskPriority <span class="token operator">&lt;=</span> highestPriorityInRange <span class="token operator">&amp;&amp;</span>
  taskPriority <span class="token operator">&gt;=</span> lowestPriorityInRange<span class="token punctuation">;</span>

<span class="token comment">// 2. 通过Lanes实现</span>
<span class="token comment">// 1) 删除单个task</span>
batchOfTasks <span class="token operator">&amp;=</span> <span class="token operator">~</span>task<span class="token punctuation">;</span>
<span class="token comment">// 2) 增加单个task</span>
batchOfTasks <span class="token operator">|=</span> task<span class="token punctuation">;</span>
<span class="token comment">// 3) 比较task是否在group中</span>
<span class="token keyword">const</span> isTaskIncludedInBatch <span class="token operator">=</span> <span class="token punctuation">(</span>task <span class="token operator">&amp;</span> batchOfTasks<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述伪代码, 可以看到<code>Lanes</code>的优越性, 运用起来代码量少, 简洁高效.</p>`,2),nn=n("code",null,"Lanes",-1),sn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js",target:"_blank",rel:"noopener noreferrer"},en=n("code",null,"ReactFiberLane.js",-1),an=n("code",null,"ReactFiberLane.js",-1),on={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"ReactFiberLane.js",-1),rn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js#L74-L103",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"Lane/Lanes",-1),pn=n("code",null,"Lane",-1),ln=n("code",null,"Lanes",-1),dn=n("code",null,"Lane/Lanes",-1),un={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js#L12-L30",target:"_blank",rel:"noopener noreferrer"},kn=o("<li>占有低位比特位的<code>Lane</code>变量对应的优先级越高 <ul><li>最高优先级为<code>SyncLanePriority</code>对应的车道为<code>SyncLane = 0b0000000000000000000000000000001</code>.</li><li>最低优先级为<code>OffscreenLanePriority</code>对应的车道为<code>OffscreenLane = 0b1000000000000000000000000000000</code>.</li></ul></li>",1),vn=o('<h2 id="优先级区别和联系" tabindex="-1"><a class="header-anchor" href="#优先级区别和联系" aria-hidden="true">#</a> 优先级区别和联系</h2><p>在源码中, 3 种优先级位于不同的 js 文件, 是相互独立的.</p><p>注意:</p><ul><li><code>LanePriority</code>和<code>SchedulerPriority</code>从命名上看, 它们代表的是<code>优先级</code></li><li><code>ReactPriorityLevel</code>从命名上看, 它代表的是<code>等级</code>而不是优先级, 它用于衡量<code>LanePriority</code>和<code>SchedulerPriority</code>的等级.</li></ul><h3 id="lanepriority" tabindex="-1"><a class="header-anchor" href="#lanepriority" aria-hidden="true">#</a> LanePriority</h3>',5),mn=n("code",null,"LanePriority",-1),hn=n("code",null,"react-reconciler",-1),bn=n("code",null,"ReactFiberLane.js",-1),yn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js#L46-L70",target:"_blank",rel:"noopener noreferrer"},_n=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">SyncLanePriority</span><span class="token operator">:</span> LanePriority <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">SyncBatchedLanePriority</span><span class="token operator">:</span> LanePriority <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token literal-property property">InputDiscreteHydrationLanePriority</span><span class="token operator">:</span> LanePriority <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">InputDiscreteLanePriority</span><span class="token operator">:</span> LanePriority <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token comment">// .....</span>

<span class="token keyword">const</span> <span class="token literal-property property">OffscreenLanePriority</span><span class="token operator">:</span> LanePriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">NoLanePriority</span><span class="token operator">:</span> LanePriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与<code>fiber</code>构造过程相关的优先级(如<code>fiber.updateQueue</code>,<code>fiber.lanes</code>)都使用<code>LanePriority</code>.</p><p>由于本节重点介绍优先级体系以及它们的转换关系, 关于<code>Lane(车道模型)</code>在<code>fiber树构造</code>时的具体使用, 在<code>fiber 树构造</code>章节详细解读.</p><h3 id="schedulerpriority" tabindex="-1"><a class="header-anchor" href="#schedulerpriority" aria-hidden="true">#</a> SchedulerPriority</h3>`,4),Ln=n("code",null,"SchedulerPriority",-1),Pn=n("code",null,"scheduler",-1),fn=n("code",null,"SchedulerPriorities.js",-1),gn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/scheduler/src/SchedulerPriorities.js",target:"_blank",rel:"noopener noreferrer"},wn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> NoPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> ImmediatePriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> UserBlockingPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> NormalPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> LowPriority <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> IdlePriority <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与<code>scheduler</code>调度中心相关的优先级使用<code>SchedulerPriority</code>.</p><h3 id="reactprioritylevel" tabindex="-1"><a class="header-anchor" href="#reactprioritylevel" aria-hidden="true">#</a> ReactPriorityLevel</h3>`,3),xn=n("code",null,"reactPriorityLevel",-1),Rn=n("code",null,"react-reconciler",-1),jn=n("code",null,"SchedulerWithReactIntegration.js",-1),Sn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/SchedulerWithReactIntegration.old.js#L65-L71",target:"_blank",rel:"noopener noreferrer"},In=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">ImmediatePriority</span><span class="token operator">:</span> ReactPriorityLevel <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">UserBlockingPriority</span><span class="token operator">:</span> ReactPriorityLevel <span class="token operator">=</span> <span class="token number">98</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">NormalPriority</span><span class="token operator">:</span> ReactPriorityLevel <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">LowPriority</span><span class="token operator">:</span> ReactPriorityLevel <span class="token operator">=</span> <span class="token number">96</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">IdlePriority</span><span class="token operator">:</span> ReactPriorityLevel <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>
<span class="token comment">// NoPriority is the absence of priority. Also React-only.</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">NoPriority</span><span class="token operator">:</span> ReactPriorityLevel <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LanePriority</code>与<code>SchedulerPriority</code>通过<code>ReactPriorityLevel</code>进行转换</p><h3 id="转换关系" tabindex="-1"><a class="header-anchor" href="#转换关系" aria-hidden="true">#</a> 转换关系</h3><p>为了能协同调度中心(<code>scheduler</code>包)和 fiber 树构造(<code>react-reconciler</code>包)中对优先级的使用, 则需要转换<code>SchedulerPriority</code>和<code>LanePriority</code>, 转换的桥梁正是<code>ReactPriorityLevel</code>.</p>`,4),Tn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/SchedulerWithReactIntegration.old.js#L93-L125",target:"_blank",rel:"noopener noreferrer"},Bn=n("code",null,"SchedulerWithReactIntegration.js",-1),Nn=n("code",null,"SchedulerPriority",-1),Fn=n("code",null,"ReactPriorityLevel",-1),On=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 把 SchedulerPriority 转换成 ReactPriorityLevel</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCurrentPriorityLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactPriorityLevel <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">Scheduler_getCurrentPriorityLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Scheduler_ImmediatePriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> ImmediatePriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Scheduler_UserBlockingPriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> UserBlockingPriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Scheduler_NormalPriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> NormalPriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Scheduler_LowPriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> LowPriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Scheduler_IdlePriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> IdlePriority<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;Unknown priority level.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 把 ReactPriorityLevel 转换成 SchedulerPriority</span>
<span class="token keyword">function</span> <span class="token function">reactPriorityToSchedulerPriority</span><span class="token punctuation">(</span><span class="token parameter">reactPriorityLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>reactPriorityLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ImmediatePriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Scheduler_ImmediatePriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">UserBlockingPriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Scheduler_UserBlockingPriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">NormalPriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Scheduler_NormalPriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">LowPriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Scheduler_LowPriority<span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">IdlePriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> Scheduler_IdlePriority<span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;Unknown priority level.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Cn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberLane.js#L196-L247",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"ReactFiberLane.js",-1),Un=n("code",null,"LanePriority",-1),Wn=n("code",null,"ReactPriorityLevel",-1),An=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">schedulerPriorityToLanePriority</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">schedulerPriorityLevel</span><span class="token operator">:</span> ReactPriorityLevel<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> LanePriority <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>schedulerPriorityLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ImmediateSchedulerPriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> SyncLanePriority<span class="token punctuation">;</span>
    <span class="token comment">// ... 省略部分代码</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> NoLanePriority<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">lanePriorityToSchedulerPriority</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">lanePriority</span><span class="token operator">:</span> LanePriority<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> ReactPriorityLevel <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>lanePriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">SyncLanePriority</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token literal-property property">SyncBatchedLanePriority</span><span class="token operator">:</span>
      <span class="token keyword">return</span> ImmediateSchedulerPriority<span class="token punctuation">;</span>
    <span class="token comment">// ... 省略部分代码</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">invariant</span><span class="token punctuation">(</span>
        <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token string">&#39;Invalid update priority: %s. This is a bug in React.&#39;</span><span class="token punctuation">,</span>
        lanePriority<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优先级使用" tabindex="-1"><a class="header-anchor" href="#优先级使用" aria-hidden="true">#</a> 优先级使用</h2>`,2),En=n("code",null,"reconciler",-1),Vn=n("code",null,"优先级",-1),Dn=n("code",null,"优先级",-1),zn=n("code",null,"React",-1),Jn=n("code",null,"可中断渲染",-1),Hn=n("code",null,"时间切片(time slicing)",-1),Qn=n("code",null,"异步渲染(suspense)",-1),Yn=n("p",null,[s("在理解了优先级的基本思路之后, 接下来就正式进入 react 源码分析中的硬核部分("),n("code",null,"scheduler 调度原理"),s("和"),n("code",null,"fiber树构造"),s(")")],-1),Gn=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),s(" 总结")],-1),Kn=n("code",null,"调度原理",-1),Mn=n("code",null,"fiber构造",-1);function Xn(Zn,$n){const a=c("ExternalLinkIcon"),t=c("RouterLink");return l(),d("div",null,[k,n("ol",null,[n("li",null,[n("a",v,[s("2017 年 Lin Clark 的演讲"),e(a)]),s("中介绍了"),m,s("架构和"),h,s(".")]),n("li",null,[n("a",b,[s("2018 年 Dan 在 JSConf 冰岛的演讲"),e(a)]),s("进一步介绍了时间切片("),y,s(")和异步渲染("),_,s(")等特性.")])]),L,n("p",null,[s("在"),P,s("源码中, 一共有"),f,s("和"),g,s(", 在深入分析之前, 再次回顾一下("),e(t,{to:"/docs/react/principle-analysis/reconciler-workflow.html"},{default:r(()=>[s("reconciler 运作流程")]),_:1}),s("):")]),w,x,n("ol",null,[n("li",null,[R,s("优先级("),j,s("): 位于"),S,s("包, 也就是"),n("a",I,[T,e(a)]),s(".")]),B,n("li",null,[s("优先级等级("),N,s(") : 位于"),F,s("包中的"),n("a",O,[C,e(a)]),s(", 负责上述 2 套优先级体系的转换.")])]),q,n("p",null,[U,s("模型的源码在"),n("a",W,[s("ReactFiberLane.js"),e(a)]),s(", 源码中大量使用了位运算(有关位运算的讲解, 可以参考"),e(t,{to:"/docs/react/algorithm/bitfield.html"},{default:r(()=>[s("React 算法之位运算")]),_:1}),s(").")]),n("p",null,[s("首先引入作者对"),A,s("的解释("),n("a",E,[s("相应的 pr"),e(a)]),s("), 这里简单概括如下:")]),n("ol",null,[V,n("li",null,[D,n("ol",null,[z,n("li",null,[J,n("blockquote",null,[n("p",null,[s("在"),H,s("模型设计之初, react 体系中还没有"),n("a",Q,[s("Suspense 异步渲染"),e(a)]),s("的概念. 现在有如下场景: 有 3 个任务, 其优先级 "),Y,s(", 正常来讲只需要按照优先级顺序执行就可以了. 但是现在情况变了: A 和 C 任务是"),G,s(", 而 B 是"),K,s("(Suspense 会调用远程 api, 算是 IO 任务), 即 "),M,s(". 此时的需求需要将任务"),X,s("从 group 中分离出来, 先处理 cpu 任务"),Z,s(".")])]),$])])]),n("li",null,[n("p",null,[nn,s("是一个不透明的类型, 只能在"),n("a",sn,[en,e(a)]),s("这个模块中维护. 如果要在其他文件中使用, 只能通过"),an,s("中提供的工具函数来使用.")])])]),n("p",null,[s("分析车道模型的源码("),n("a",on,[tn,e(a)]),s("中), 可以得到如下结论:")]),n("ol",null,[n("li",null,[s("可以使用的比特位一共有 31 位(为什么? 可以参考"),e(t,{to:"/docs/react/algorithm/bitfield.html"},{default:r(()=>[s("React 算法之位运算")]),_:1}),s("中的说明).")]),n("li",null,[s("共定义了"),n("a",rn,[s("18 种车道("),cn,s(")变量"),e(a)]),s(", 每一个变量占有 1 个或多个比特位, 分别定义为"),pn,s("和"),ln,s("类型.")]),n("li",null,[s("每一种车道("),dn,s(")都有对应的优先级, 所以源码中定义了 18 种优先级("),n("a",un,[s("LanePriority"),e(a)]),s(").")]),kn]),vn,n("p",null,[mn,s(": 属于"),hn,s("包, 定义于"),bn,s("("),n("a",yn,[s("见源码"),e(a)]),s(").")]),_n,n("p",null,[Ln,s(", 属于"),Pn,s("包, 定义于"),fn,s("中("),n("a",gn,[s("见源码"),e(a)]),s(").")]),wn,n("p",null,[xn,s(", 属于"),Rn,s("包, 定义于"),jn,s("中("),n("a",Sn,[s("见源码"),e(a)]),s(").")]),In,n("p",null,[s("在"),n("a",Tn,[Bn,s("中"),e(a)]),s(", 可以互转"),Nn,s(" 和 "),Fn,s(":")]),On,n("p",null,[s("在"),n("a",Cn,[qn,s("中"),e(a)]),s(", 可以互转"),Un,s(" 和 "),Wn,s(":")]),An,n("p",null,[s("通过"),e(t,{to:"/docs/react/principle-analysis/reconciler-workflow.html"},{default:r(()=>[s("reconciler 运作流程")]),_:1}),s("中的归纳, "),En,s("从输入到输出一共经历了 4 个阶段, 在每个阶段中都会涉及到与"),Vn,s("相关的处理. 正是通过"),Dn,s("的灵活运用, "),zn,s("实现了"),Jn,s(","),Hn,s(","),Qn,s("等特性.")]),Yn,Gn,n("p",null,[s("本文介绍了 react 源码中有关优先级的部分, 并梳理了 3 种优先级之间的区别和联系. 它们贯穿了"),e(t,{to:"/docs/react/principle-analysis/reconciler-workflow.html"},{default:r(()=>[s("reconciler 运作流程")]),_:1}),s("中的 4 个阶段, 在 react 源码中所占用的代码量比较高, 理解它们的设计思路, 为接下来分析"),Kn,s("和"),Mn,s("打下基础.")])])}const es=i(u,[["render",Xn],["__file","priority.html.vue"]]);export{es as default};
