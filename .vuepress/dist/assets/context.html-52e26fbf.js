import{_ as l,p as r,q as i,s as n,R as s,t as a,a2 as p,Y as t,n as c}from"./framework-e1bed10d.js";const u={},d=t('<h1 id="react-context-原理" tabindex="-1"><a class="header-anchor" href="#react-context-原理" aria-hidden="true">#</a> React Context 原理</h1><p>简单来讲, <code>Context</code>提供了一种直接访问祖先节点上的状态的方法, 避免了多级组件层层传递<code>props</code>.</p><p>有关<code>Context</code>的用法, 请直接查看官方文档, 本文将从<code>fiber树构造</code>的视角, 分析<code>Context</code>的实现原理.</p><h2 id="创建-context" tabindex="-1"><a class="header-anchor" href="#创建-context" aria-hidden="true">#</a> 创建 Context</h2>',4),k=n("code",null,"React.createContext",-1),v=n("code",null,"context",-1),m={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react/src/ReactContext.js#L14-L152",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"context",-1),y=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> createContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">defaultValue</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>
  <span class="token literal-property property">calculateChangedBits</span><span class="token operator">:</span> <span class="token operator">?</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token constant">T</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>calculateChangedBits <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    calculateChangedBits <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_CONTEXT_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_calculateChangedBits</span><span class="token operator">:</span> calculateChangedBits<span class="token punctuation">,</span>
    <span class="token comment">// As a workaround to support multiple concurrent renderers, we categorize</span>
    <span class="token comment">// some renderers as primary and others as secondary. We only expect</span>
    <span class="token comment">// there to be two concurrent renderers at most: React Native (primary) and</span>
    <span class="token comment">// Fabric (secondary); React DOM (primary) and React ART (secondary).</span>
    <span class="token comment">// Secondary renderers store their context values on separate fields.</span>
    <span class="token literal-property property">_currentValue</span><span class="token operator">:</span> defaultValue<span class="token punctuation">,</span>
    <span class="token literal-property property">_currentValue2</span><span class="token operator">:</span> defaultValue<span class="token punctuation">,</span>
    <span class="token literal-property property">_threadCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Provider</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Consumer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  context<span class="token punctuation">.</span>Provider <span class="token operator">=</span> <span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_PROVIDER_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">_context</span><span class="token operator">:</span> context<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>Consumer <span class="token operator">=</span> context<span class="token punctuation">;</span>
  <span class="token keyword">return</span> context<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createContext</code>核心逻辑:</p><ul><li>其初始值保存在<code>context._currentValue</code>(同时保存到<code>context._currentValue2</code>. 英文注释已经解释, 保存 2 个 value 是为了支持多个渲染器并发渲染)</li><li>同时创建了<code>context.Provider</code>, <code>context.Consumer</code>2 个<code>reactElement</code>对象.</li></ul><p>比如, 创建<code>const MyContext = React.createContext(defaultValue);</code>, 之后使用<code>&lt;MyContext.Provider value={/* 某个值 */}&gt;</code>声明一个<code>ContextProvider</code>类型的组件.</p>`,4),h=n("code",null,"fiber树渲染",-1),x=n("code",null,"beginWork",-1),w=n("code",null,"ContextProvider",-1),g={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L2842-L2898",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> updateLanes <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>lanes<span class="token punctuation">;</span>
  workInProgress<span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token comment">// ...省略无关代码</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ContextProvider</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateContextProvider</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ContextConsumer</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateContextConsumer</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">updateContextProvider</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...省略无关代码</span>
  <span class="token keyword">const</span> <span class="token literal-property property">providerType</span><span class="token operator">:</span> ReactProviderType<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> providerType<span class="token punctuation">.</span>_context<span class="token punctuation">;</span>

  <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">const</span> oldProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>
  <span class="token comment">// 接收新value</span>
  <span class="token keyword">const</span> newValue <span class="token operator">=</span> newProps<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token comment">// 更新 ContextProvider._currentValue</span>
  <span class="token function">pushProvider</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 省略更新context的逻辑, 下文讨论</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> newChildren <span class="token operator">=</span> newProps<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> newChildren<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>updateContextProvider()</code>在<code>fiber初次创建</code>时十分简单, 仅仅就是保存了<code>pendingProps.value</code>做为<code>context</code>的最新值, 之后这个最新的值用于供给消费.</p><h3 id="context-currentvalue-存储" tabindex="-1"><a class="header-anchor" href="#context-currentvalue-存储" aria-hidden="true">#</a> context._currentValue 存储</h3>`,3),f=n("code",null,"updateContextProvider -> pushProvider",-1),C={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberNewContext.old.js#L75-L113",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略无关代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> pushProvider<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>providerFiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span> <span class="token literal-property property">nextValue</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> providerFiber<span class="token punctuation">.</span>type<span class="token punctuation">.</span>_context<span class="token punctuation">;</span>
  <span class="token function">push</span><span class="token punctuation">(</span>valueCursor<span class="token punctuation">,</span> context<span class="token punctuation">.</span>_currentValue<span class="token punctuation">,</span> providerFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>_currentValue <span class="token operator">=</span> nextValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>pushProvider</code>实际上是一个存储函数, 利用<code>栈</code>的特性, 先把<code>context._currentValue</code>压栈, 之后更新<code>context._currentValue = nextValue</code>.</p>`,2),L=n("code",null,"pushProvider",-1),R={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberNewContext.old.js#L115-L126",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"栈",-1),F=n("code",null,"栈",-1),V=n("code",null,"context._currentValue",-1),j=n("code",null,"Context Api",-1),T=n("code",null,"fiber树构造",-1),B=n("code",null,"pushProvider/popProvider",-1),N=t('<h2 id="消费-context" tabindex="-1"><a class="header-anchor" href="#消费-context" aria-hidden="true">#</a> 消费 Context</h2><p>使用了<code>MyContext.Provider</code>组件之后, 在<code>fiber树构造</code>过程中, context 的值会被<code>ContextProvider</code>类型的<code>fiber</code>节点所更新. 在后续的过程中, 如何读取<code>context._currentValue</code>?</p><p>在<code>react</code>中, 共提供了 3 种方式可以消费<code>Context</code>:</p>',3),W=n("p",null,[s("使用"),n("code",null,"MyContext.Consumer"),s("组件: 用于"),n("code",null,"JSX"),s(". 如, "),n("code",null,"<MyContext.Consumer>(value)=>{}</MyContext.Consumer>")],-1),M=n("code",null,"beginWork",-1),O=n("code",null,"ContextConsumer",-1),E={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L2902-L2963",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateContextConsumer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
  <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">const</span> render <span class="token operator">=</span> newProps<span class="token punctuation">.</span>children<span class="token punctuation">;</span>

  <span class="token comment">// 读取context</span>
  <span class="token function">prepareToReadContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">readContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> newProps<span class="token punctuation">.</span>unstable_observedBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> newChildren<span class="token punctuation">;</span>

  <span class="token comment">// ...省略无关代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D=n("p",null,[s("使用"),n("code",null,"useContext"),s(": 用于"),n("code",null,"function"),s("中. 如, "),n("code",null,"const value = useContext(MyContext)")],-1),U=n("li",null,[s("进入"),n("code",null,"updateFunctionComponent"),s("后, 会调用"),n("code",null,"prepareToReadContext")],-1),S={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberHooks.old.js#L1780",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberHooks.old.js#L1801",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"useContext",-1),Y=n("code",null,"readContext",-1),q=n("p",null,[n("code",null,"class"),s("组件中, 使用一个静态属性"),n("code",null,"contextType"),s(": 用于"),n("code",null,"class"),s("组件中获取"),n("code",null,"context"),s(". 如, "),n("code",null,"MyClass.contextType = MyContext;")],-1),H=n("li",null,[s("进入"),n("code",null,"updateClassComponent"),s("后, 会调用"),n("code",null,"prepareToReadContext")],-1),X={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L573",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L807",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L1031",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"context = readContext((contextType: any));",-1),K=n("code",null,"react",-1),Z=n("code",null,"api",-1),nn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberNewContext.old.js#L297-L317",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberNewContext.old.js#L319-L381",target:"_blank",rel:"noopener noreferrer"},an=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ... 省略无关代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">prepareToReadContext</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 设置全局变量, 为readContext做准备</span>
  currentlyRenderingFiber <span class="token operator">=</span> workInProgress<span class="token punctuation">;</span>
  lastContextDependency <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  lastContextWithAllBitsObserved <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> dependencies <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>dependencies<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dependencies <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> firstContext <span class="token operator">=</span> dependencies<span class="token punctuation">.</span>firstContext<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstContext <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">includesSomeLane</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Context list has a pending update. Mark that this fiber performed work.</span>
        <span class="token function">markWorkInProgressReceivedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// Reset the work-in-progress list</span>
      dependencies<span class="token punctuation">.</span>firstContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// ... 省略无关代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> readContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">observedBits</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">|</span> number <span class="token operator">|</span> boolean<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> contextItem <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">observedBits</span><span class="token operator">:</span> resolvedObservedBits<span class="token punctuation">,</span>
    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 1. 构造一个contextItem, 加入到 workInProgress.dependencies链表之后</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastContextDependency <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lastContextDependency <span class="token operator">=</span> contextItem<span class="token punctuation">;</span>
    currentlyRenderingFiber<span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">lanes</span><span class="token operator">:</span> NoLanes<span class="token punctuation">,</span>
      <span class="token literal-property property">firstContext</span><span class="token operator">:</span> contextItem<span class="token punctuation">,</span>
      <span class="token literal-property property">responders</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    lastContextDependency <span class="token operator">=</span> lastContextDependency<span class="token punctuation">.</span>next <span class="token operator">=</span> contextItem<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 2. 返回 currentValue</span>
  <span class="token keyword">return</span> isPrimaryRenderer <span class="token operator">?</span> context<span class="token punctuation">.</span>_currentValue <span class="token operator">:</span> context<span class="token punctuation">.</span>_currentValue2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心逻辑:</p><ol><li><code>prepareToReadContext</code>: 设置<code>currentlyRenderingFiber = workInProgress</code>, 并重置<code>lastContextDependency</code>等全局变量.</li><li><code>readContext</code>: 返回<code>context._currentValue</code>, 并构造一个<code>contextItem</code>添加到<code>workInProgress.dependencies</code>链表之后.</li></ol><p>注意: 这个<code>readContext</code>并不是纯函数, 它还有一些副作用, 会更改<code>workInProgress.dependencies</code>, 其中<code>contextItem.context</code>保存了当前<code>context</code>的引用. 这个<code>dependencies</code>属性会在更新时使用, 用于判定是否依赖了<code>ContextProvider</code>中的值.</p><p>返回<code>context._currentValue</code>之后, 之后继续进行<code>fiber树构造</code>直到全部完成即可.</p><h2 id="更新-context" tabindex="-1"><a class="header-anchor" href="#更新-context" aria-hidden="true">#</a> 更新 Context</h2><p>来到更新阶段, 同样进入<code>updateContextConsumer</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateContextProvider</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token literal-property property">providerType</span><span class="token operator">:</span> ReactProviderType<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> providerType<span class="token punctuation">.</span>_context<span class="token punctuation">;</span>

  <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">const</span> oldProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedProps<span class="token punctuation">;</span>

  <span class="token keyword">const</span> newValue <span class="token operator">=</span> newProps<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  <span class="token function">pushProvider</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新阶段进入</span>
    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> oldProps<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token comment">// 对比 newValue 和 oldValue</span>
    <span class="token keyword">const</span> changedBits <span class="token operator">=</span> <span class="token function">calculateChangedBits</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>changedBits <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// value没有变动, 进入 Bailout 逻辑</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        oldProps<span class="token punctuation">.</span>children <span class="token operator">===</span> newProps<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span>
        <span class="token operator">!</span><span class="token function">hasLegacyContextChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">bailoutOnAlreadyFinishedWork</span><span class="token punctuation">(</span>
          current<span class="token punctuation">,</span>
          workInProgress<span class="token punctuation">,</span>
          renderLanes<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// value变动, 查找对应的consumers, 并使其能够被更新</span>
      <span class="token function">propagateContextChange</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> context<span class="token punctuation">,</span> changedBits<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ... 省略无关代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心逻辑:</p>`,9),en=n("code",null,"value",-1),tn=n("code",null,"Bailout",-1),on=n("code",null,"bailout",-1),pn=n("li",null,[n("code",null,"value"),s("改变, 调用"),n("code",null,"propagateContextChange")],-1),cn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberNewContext.old.js#L182-L295",target:"_blank",rel:"noopener noreferrer"},ln=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">propagateContextChange</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">context</span><span class="token operator">:</span> ReactContext<span class="token operator">&lt;</span>mixed<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">changedBits</span><span class="token operator">:</span> number<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> fiber <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set the return pointer of the child to the work-in-progress fiber.</span>
    fiber<span class="token punctuation">.</span>return <span class="token operator">=</span> workInProgress<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>fiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> nextFiber<span class="token punctuation">;</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> fiber<span class="token punctuation">.</span>dependencies<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nextFiber <span class="token operator">=</span> fiber<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
      <span class="token keyword">let</span> dependency <span class="token operator">=</span> list<span class="token punctuation">.</span>firstContext<span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>dependency <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查 dependency中依赖的context</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          dependency<span class="token punctuation">.</span>context <span class="token operator">===</span> context <span class="token operator">&amp;&amp;</span>
          <span class="token punctuation">(</span>dependency<span class="token punctuation">.</span>observedBits <span class="token operator">&amp;</span> changedBits<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 符合条件, 安排调度</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>tag <span class="token operator">===</span> ClassComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// class 组件需要创建一个update对象, 添加到updateQueue队列</span>
            <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>
              NoTimestamp<span class="token punctuation">,</span>
              <span class="token function">pickArbitraryLane</span><span class="token punctuation">(</span>renderLanes<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            update<span class="token punctuation">.</span>tag <span class="token operator">=</span> ForceUpdate<span class="token punctuation">;</span> <span class="token comment">// 注意ForceUpdate, 保证class组件一定执行render</span>
            <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          fiber<span class="token punctuation">.</span>lanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> alternate <span class="token operator">=</span> fiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            alternate<span class="token punctuation">.</span>lanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>alternate<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 向上</span>
          <span class="token function">scheduleWorkOnParentPath</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>return<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// 标记优先级</span>
          list<span class="token punctuation">.</span>lanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>lanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment">// 退出查找</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dependency <span class="token operator">=</span> dependency<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...省略无关代码</span>
    <span class="token comment">// ...省略无关代码</span>

    fiber <span class="token operator">=</span> nextFiber<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>propagateContextChange</code>源码比较长, 核心逻辑如下:</p>`,2),rn=n("li",null,[n("p",null,[s("向下遍历: 从"),n("code",null,"ContextProvider"),s("类型的节点开始, 向下查找所有"),n("code",null,"fiber.dependencies"),s("依赖该"),n("code",null,"context"),s("的节点(假设叫做"),n("code",null,"consumer"),s(").")])],-1),un=n("p",null,[s("向上遍历: 从"),n("code",null,"consumer"),s("节点开始, 向上遍历, 修改父路径上所有节点的"),n("code",null,"fiber.childLanes"),s("属性, 表明其子节点有改动, 子节点会进入更新逻辑.")],-1),dn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberNewContext.old.js#L155-L180",target:"_blank",rel:"noopener noreferrer"},kn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">scheduleWorkOnParentPath</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">parent</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Update the child lanes of all the ancestors, including the alternates.</span>
  <span class="token keyword">let</span> node <span class="token operator">=</span> parent<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> alternate <span class="token operator">=</span> node<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSubsetOfLanes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childLanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>childLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childLanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        alternate<span class="token punctuation">.</span>childLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>
          alternate<span class="token punctuation">.</span>childLanes<span class="token punctuation">,</span>
          renderLanes<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
      alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span><span class="token function">isSubsetOfLanes</span><span class="token punctuation">(</span>alternate<span class="token punctuation">.</span>childLanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      alternate<span class="token punctuation">.</span>childLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>alternate<span class="token punctuation">.</span>childLanes<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Neither alternate was updated, which means the rest of the</span>
      <span class="token comment">// ancestor path already has sufficient priority.</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    node <span class="token operator">=</span> node<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),vn=n("code",null,"scheduleWorkOnParentPath",-1),mn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L625-L667",target:"_blank",rel:"noopener noreferrer"},bn=t('<p>通过以上 2 个步骤, 保证了所有消费该<code>context</code>的子节点都会被重新构造, 进而保证了状态的一致性, 实现了<code>context</code>更新.</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>Context</code>的实现思路还是比较清晰, 总体分为 2 步.</p><ol><li>在消费状态时,<code>ContextConsumer</code>节点调用<code>readContext(MyContext)</code>获取最新状态.</li><li>在更新状态时, 由<code>ContextProvider</code>节点负责查找所有<code>ContextConsumer</code>节点, 并设置消费节点的父路径上所有节点的<code>fiber.childLanes</code>, 保证消费节点可以得到更新.</li></ol>',4);function yn(hn,xn){const e=c("ExternalLinkIcon"),o=c("RouterLink");return r(),i("div",null,[d,n("p",null,[s("根据官网示例, 通过"),k,s("这个 api 来创建"),v,s("对象. 在"),n("a",m,[s("createContext"),a(e)]),s("中, 可以看到"),b,s("对象的数据结构:")]),y,n("p",null,[s("在"),h,s("时, 在"),x,s("中"),w,s("类型的节点对应的处理函数是"),n("a",g,[s("updateContextProvider"),a(e)]),s(":")]),_,n("p",null,[s("注意"),f,s("中的"),n("a",C,[s("pushProvider(workInProgress, newValue)"),a(e)]),s(":")]),P,n("p",null,[s("与"),L,s("对应的还有"),n("a",R,[s("popProvider"),a(e)]),s(", 同样利用"),I,s("的特性, 把"),F,s("中的值弹出, 还原到"),V,s("中.")]),n("p",null,[s("本节重点分析"),j,s("在"),T,s("过程中的作用. 有关"),B,s("的具体实现过程(栈存储), 在"),a(o,{to:"/docs/react/algorithm/stack.html#context"},{default:p(()=>[s("React 算法之栈操作")]),_:1}),s("中有详细图解.")]),N,n("ol",null,[n("li",null,[W,n("ul",null,[n("li",null,[M,s("中, 对于"),O,s("类型的节点, 对应的处理函数是"),n("a",E,[s("updateContextConsumer"),a(e)])])]),A]),n("li",null,[D,n("ul",null,[U,n("li",null,[s("无论是初次"),n("a",S,[s("创建阶段"),a(e)]),s(", 还是"),n("a",$,[s("更新阶段"),a(e)]),s(", "),z,s("都直接调用了"),Y])])]),n("li",null,[q,n("ul",null,[H,n("li",null,[s("无论"),n("a",X,[s("constructClassInstance"),a(e)]),s(","),n("a",J,[s("mountClassInstance"),a(e)]),s(", "),n("a",Q,[s("updateClassInstance"),a(e)]),s("内部都调用"),G])])])]),n("p",null,[s("所以这 3 种方式只是"),K,s("根据不同使用场景封装的"),Z,s(", 内部都会调用"),n("a",nn,[s("prepareToReadContext"),a(e)]),s("和"),n("a",sn,[s("readContext(contextType)"),a(e)]),s(".")]),an,n("ol",null,[n("li",null,[en,s("没有改变, 直接进入"),tn,s("(可以回顾"),a(o,{to:"/docs/react/principle-analysis/fibertree-update.html#bailout"},{default:p(()=>[s("fiber 树构造(对比更新)")]),_:1}),s("中对"),on,s("的解释).")]),pn]),n("p",null,[n("a",cn,[s("propagateContextChange"),a(e)]),s(":")]),ln,n("ol",null,[rn,n("li",null,[un,n("ul",null,[n("li",null,[n("p",null,[s("这一步通过调用"),n("a",dn,[s("scheduleWorkOnParentPath(fiber.return, renderLanes)"),a(e)]),s("实现.")]),kn]),n("li",null,[n("p",null,[vn,s("与"),n("a",mn,[s("markUpdateLaneFromFiberToRoot"),a(e)]),s("的作用相似, 具体可以回顾"),a(o,{to:"/docs/react/principle-analysis/fibertree-update.html#markUpdateLaneFromFiberToRoot"},{default:p(()=>[s("fiber 树构造(对比更新)")]),_:1})])])])])]),bn])}const gn=l(u,[["render",yn],["__file","context.html.vue"]]);export{gn as default};
