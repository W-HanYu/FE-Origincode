import{_ as l}from"./process-legacy-6e17b9c8.js";import{_ as i}from"./fibertree-beforecommit-3829fb16.js";import{_ as r,p as u,q as d,s,R as n,t as a,a2 as p,Y as o,n as c}from"./framework-e1bed10d.js";const k="/FE-Origincode/assets/update-container-93794e09.png",v="/FE-Origincode/assets/initial-status-72d65895.png",m="/FE-Origincode/assets/status-freshstack-e9054032.png",b="/FE-Origincode/assets/unitofwork0-ace79d02.png",f="/FE-Origincode/assets/unitofwork1-45436250.png",g="/FE-Origincode/assets/unitofwork2-812947f3.png",h="/FE-Origincode/assets/unitofwork3-c04955ca.png",w="/FE-Origincode/assets/unitofwork4.1-30d51c93.png",_="/FE-Origincode/assets/unitofwork4.2-6b5ef6df.png",y="/FE-Origincode/assets/unitofwork5-12d308ca.png",P="/FE-Origincode/assets/unitofwork6-bb0a1ba8.png",R="/FE-Origincode/assets/unitofwork7-83b6f0f5.png",W="/FE-Origincode/assets/unitofwork7.1-2b080092.png",C="/FE-Origincode/assets/unitofwork7.2-e64e76ca.png",I="/FE-Origincode/assets/unitofwork7.3-dfc863fc.png",x="/FE-Origincode/assets/unitofwork7.4-396f0bfe.png",F={},L=s("h1",{id:"fiber-树构造-初次创建",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fiber-树构造-初次创建","aria-hidden":"true"},"#"),n(" fiber 树构造(初次创建)")],-1),E=s("code",null,"fiber 树构造",-1),O=s("ol",null,[s("li",null,[n("初次创建: 在"),s("code",null,"React"),n("应用首次启动时, 界面还没有渲染, 此时并不会进入对比过程, 相当于直接构造一棵全新的树.")]),s("li",null,[n("对比更新: "),s("code",null,"React"),n("应用启动后, 界面已经渲染. 如果再次发生更新, 创建"),s("code",null,"新fiber"),n("之前需要和"),s("code",null,"旧fiber"),n("进行对比. 最后构造的 fiber 树有可能是全新的, 也可能是部分更新的.")])],-1),j=s("code",null,"初次创建",-1),H=s("code",null,"fiber 树构造",-1),S=s("code",null,"Legacy",-1),U=s("code",null,"fiber树构造",-1),D=s("code",null,"Concurrent",-1),N=s("code",null,"Legacy",-1),A={href:"https://codesandbox.io/s/busy-jang-b26hy?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"},M=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">App Mount</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">App 组件对应的fiber节点: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_reactInternals<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>header<span class="token operator">&gt;</span>header<span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Content <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Content</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Content Mount</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Content 组件对应的fiber节点: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_reactInternals<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="启动阶段" tabindex="-1"><a class="header-anchor" href="#启动阶段" aria-hidden="true">#</a> 启动阶段</h2>`,2),T=s("code",null,"react-reconciler",-1),B=s("code",null,"updateContainer",-1),z=o('<p><img src="'+l+`" alt=""></p><p>根据这个结构, 可以在控制台中打出当前页面对应的<code>fiber</code>树(用于观察其结构):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_reactRootContainer<span class="token punctuation">.</span>_internalRoot<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),X=s("code",null,"react-reconciler",-1),Q={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberReconciler.old.js#L250-L321",target:"_blank",rel:"noopener noreferrer"},q=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ... 省略了部分代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">element</span><span class="token operator">:</span> ReactNodeList<span class="token punctuation">,</span>
  <span class="token literal-property property">container</span><span class="token operator">:</span> OpaqueRoot<span class="token punctuation">,</span>
  <span class="token literal-property property">parentComponent</span><span class="token operator">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">callback</span><span class="token operator">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Lane <span class="token punctuation">{</span>
  <span class="token comment">// 获取当前时间戳</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> container<span class="token punctuation">.</span>current<span class="token punctuation">;</span>
  <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 1. 创建一个优先级变量(车道模型)</span>
  <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 2. 根据车道优先级, 创建update对象, 并加入fiber.updateQueue.pending队列</span>
  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>eventTime<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
  update<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span> element <span class="token punctuation">}</span><span class="token punctuation">;</span>
  callback <span class="token operator">=</span> callback <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> callback<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 3. 进入reconciler运作流程中的\`输入\`环节</span>
  <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> lane<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<code>update</code>对象的创建, 此时的内存结构如下:</p><p><img src="`+k+'" alt=""></p><p>注意: 最初的<code>ReactElement</code>对象<code>&lt;App/&gt;</code>被挂载到<code>HostRootFiber.updateQueue.shared.pending.payload.element</code>中, 后文<code>fiber树构造</code>过程中会再次变动.</p><h2 id="构造阶段" tabindex="-1"><a class="header-anchor" href="#构造阶段" aria-hidden="true">#</a> 构造阶段</h2><p>为了突出构造过程,排除干扰,先把内存状态图中的<code>FiberRoot</code>和<code>HostRootFiber</code>单独提出来(后文在此基础上添加):</p><p><img src="'+v+'" alt=""></p>',7),V={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L517-L619",target:"_blank",rel:"noopener noreferrer"},Y=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略部分代码</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">fiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">lane</span><span class="token operator">:</span> Lane<span class="token punctuation">,</span>
  <span class="token literal-property property">eventTime</span><span class="token operator">:</span> number<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 标记优先级</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">markUpdateLaneFromFiberToRoot</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>lane <span class="token operator">===</span> SyncLane<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> LegacyUnbatchedContext<span class="token punctuation">)</span> <span class="token operator">!==</span> NoContext <span class="token operator">&amp;&amp;</span>
      <span class="token punctuation">(</span>executionContext <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RenderContext <span class="token operator">|</span> CommitContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> NoContext
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 首次渲染, 直接进行\`fiber构造\`</span>
      <span class="token function">performSyncWorkOnRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$=s("code",null,"Legacy",-1),G={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L625-L667",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L965-L1045",target:"_blank",rel:"noopener noreferrer"},K=o(`<p>其中<code>markUpdateLaneFromFiberToRoot(fiber, lane)</code>函数在<code>fiber树构造(对比更新)</code>中才会发挥作用, 因为在<code>初次创建</code>时并没有与当前页面所对应的<code>fiber树</code>, 所以核心代码并没有执行, 最后直接返回了<code>FiberRoot</code>对象.</p><p><code>performSyncWorkOnRoot</code>看起来源码很多, <code>初次创建</code>中真正用到的就 2 个函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">performSyncWorkOnRoot</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> lanes<span class="token punctuation">;</span>
  <span class="token keyword">let</span> exitStatus<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    root <span class="token operator">===</span> workInProgressRoot <span class="token operator">&amp;&amp;</span>
    <span class="token function">includesSomeLane</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>expiredLanes<span class="token punctuation">,</span> workInProgressRootRenderLanes<span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初次构造时(因为root=fiberRoot, workInProgressRoot=null), 所以不会进入</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 获取本次render的优先级, 初次构造返回 NoLanes</span>
    lanes <span class="token operator">=</span> <span class="token function">getNextLanes</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> NoLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 从root节点开始, 至上而下更新</span>
    exitStatus <span class="token operator">=</span> <span class="token function">renderRootSync</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将最新的fiber树挂载到root.finishedWork节点上</span>
  <span class="token keyword">const</span> <span class="token literal-property property">finishedWork</span><span class="token operator">:</span> Fiber <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>current<span class="token punctuation">.</span>alternate<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>finishedWork <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>
  root<span class="token punctuation">.</span>finishedLanes <span class="token operator">=</span> lanes<span class="token punctuation">;</span>
  <span class="token comment">// 进入commit阶段</span>
  <span class="token function">commitRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...后面的内容本节不讨论</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Z=s("code",null,"getNextLanes",-1),nn=s("code",null,"优先级",-1),sn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1490-L1553",target:"_blank",rel:"noopener noreferrer"},an=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">renderRootSync</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> <span class="token literal-property property">lanes</span><span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> prevExecutionContext <span class="token operator">=</span> executionContext<span class="token punctuation">;</span>
  executionContext <span class="token operator">|=</span> RenderContext<span class="token punctuation">;</span>
  <span class="token comment">// 如果fiberRoot变动, 或者update.lane变动, 都会刷新栈帧, 丢弃上一次渲染进度</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressRoot <span class="token operator">!==</span> root <span class="token operator">||</span> workInProgressRootRenderLanes <span class="token operator">!==</span> lanes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 刷新栈帧, legacy模式下都会进入</span>
    <span class="token function">prepareFreshStack</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>thrownValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handleError</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> thrownValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  executionContext <span class="token operator">=</span> prevExecutionContext<span class="token punctuation">;</span>
  <span class="token comment">// 重置全局变量, 表明render结束</span>
  workInProgressRoot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  workInProgressRootRenderLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">return</span> workInProgressRootExitStatus<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),en=s("code",null,"renderRootSync",-1),on=s("code",null,"fiber树构造",-1),tn=s("code",null,"workLoopSync",-1),pn=s("code",null,"prepareFreshStack",-1),cn=s("code",null,"HostRootFiber.alternate",-1),ln=s("code",null,"workInProgress",-1),rn=s("code",null,"workInProgressRoot",-1),un=o('<p><img src="'+m+`" alt=""></p><h3 id="循环构造" tabindex="-1"><a class="header-anchor" href="#循环构造" aria-hidden="true">#</a> 循环构造</h3><p>逻辑来到<code>workLoopSync</code>, 虽然本节在<code>Legacy</code>模式下进行讨论, 此处还是对比一下<code>workLoopConcurrent</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">workLoopSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">workLoopConcurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Perform work until Scheduler asks us to yield</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>workInProgress <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">shouldYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),dn=s("code",null,"workLoopConcurrent",-1),kn=s("code",null,"Sync",-1),vn=s("code",null,"时间切片",-1),mn=s("code",null,"可中断渲染",-1),bn=s("code",null,"performUnitOfWork函数",-1),fn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1642-L1668",target:"_blank",rel:"noopener noreferrer"},gn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ... 省略部分无关代码</span>
<span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">unitOfWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token comment">// unitOfWork就是被传入的workInProgress</span>
  <span class="token keyword">const</span> current <span class="token operator">=</span> unitOfWork<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
  <span class="token keyword">let</span> next<span class="token punctuation">;</span>
  next <span class="token operator">=</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> unitOfWork<span class="token punctuation">,</span> subtreeRenderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  unitOfWork<span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> unitOfWork<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果没有派生出新的节点, 则进入completeWork阶段, 传入的是当前unitOfWork</span>
    <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>unitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    workInProgress <span class="token operator">=</span> next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),hn=s("code",null,"fiber树构造",-1),wn=s("code",null,"workInProgress",-1),_n=s("code",null,"current",-1),yn=s("code",null,"双缓冲技术",-1),Pn=o('<ul><li><code>workInProgress</code>和<code>current</code>都视为指针</li><li><code>workInProgress</code>指向当前正在构造的<code>fiber</code>节点</li><li><code>current = workInProgress.alternate</code>(即<code>fiber.alternate</code>), 指向当前页面正在使用的<code>fiber</code>节点. 初次构造时, 页面还未渲染, 此时<code>current = null</code>.</li></ul><p>在深度优先遍历中, 每个<code>fiber</code>节点都会经历 2 个阶段:</p><ol><li>探寻阶段 <code>beginWork</code></li><li>回溯阶段 <code>completeWork</code></li></ol><p>这 2 个阶段共同完成了每一个<code>fiber</code>节点的创建, 所有<code>fiber</code>节点则构成了<code>fiber树</code>.</p><h3 id="探寻阶段-beginwork" tabindex="-1"><a class="header-anchor" href="#探寻阶段-beginwork" aria-hidden="true">#</a> 探寻阶段 beginWork</h3>',5),Rn=s("code",null,"beginWork(current, unitOfWork, subtreeRenderLanes)",-1),Wn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L3083-L3494",target:"_blank",rel:"noopener noreferrer"},Cn=s("code",null,"updateXXX",-1),In=s("code",null,"updateHostRoot",-1),xn=s("code",null,"updateClassComponent",-1),Fn=o(`<ol><li>根据 <code>ReactElement</code>对象创建所有的<code>fiber</code>节点, 最终构造出<code>fiber树形结构</code>(设置<code>return</code>和<code>sibling</code>指针)</li><li>设置<code>fiber.flags</code>(二进制形式变量, 用来标记 <code>fiber</code>节点 的<code>增,删,改</code>状态, 等待<code>completeWork阶段处理</code>)</li><li>设置<code>fiber.stateNode</code>局部状态(如<code>Class类型</code>节点: <code>fiber.stateNode=new Class()</code>)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> updateLanes <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>lanes<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// update逻辑, 首次render不会进入</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    didReceiveUpdate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 1. 设置workInProgress优先级为NoLanes(最高优先级)</span>
  workInProgress<span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token comment">// 2. 根据workInProgress节点的类型, 用不同的方法派生出子节点</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>
    workInProgress<span class="token punctuation">.</span>tag <span class="token comment">// 只保留了本例使用到的case</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> Component <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
      <span class="token keyword">const</span> unresolvedProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
      <span class="token keyword">const</span> resolvedProps <span class="token operator">=</span>
        workInProgress<span class="token punctuation">.</span>elementType <span class="token operator">===</span> Component
          <span class="token operator">?</span> unresolvedProps
          <span class="token operator">:</span> <span class="token function">resolveDefaultProps</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> unresolvedProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span>
        current<span class="token punctuation">,</span>
        workInProgress<span class="token punctuation">,</span>
        Component<span class="token punctuation">,</span>
        resolvedProps<span class="token punctuation">,</span>
        renderLanes<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateHostRoot</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostText</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateHostText</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">Fragment</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token function">updateFragment</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>updateXXX</code>函数(如: updateHostRoot, updateClassComponent 等)虽然 case 较多, 但是主要逻辑可以概括为 3 个步骤:</p><ol><li>根据<code>fiber.pendingProps, fiber.updateQueue</code>等<code>输入数据</code>状态, 计算<code>fiber.memoizedState</code>作为<code>输出状态</code></li><li>获取下级<code>ReactElement</code>对象 <ol><li>class 类型的 <code>fiber</code> 节点 <ul><li>构建<code>React.Component</code>实例</li><li>把新实例挂载到<code>fiber.stateNode</code>上</li><li>执行<code>render</code>之前的生命周期函数</li><li>执行<code>render</code>方法, 获取下级<code>reactElement</code></li><li>根据实际情况, 设置<code>fiber.flags</code></li></ul></li><li>function 类型的 <code>fiber</code> 节点 <ul><li>执行 function, 获取下级<code>reactElement</code></li><li>根据实际情况, 设置<code>fiber.flags</code></li></ul></li><li>HostComponent 类型(如: <code>div, span, button</code> 等)的 <code>fiber</code> 节点 <ul><li><code>pendingProps.children</code>作为下级<code>reactElement</code></li><li>如果下级节点是文本节点,则设置下级节点为 null. 准备进入<code>completeUnitOfWork</code>阶段</li><li>根据实际情况, 设置<code>fiber.flags</code></li></ul></li><li>其他类型...</li></ol></li><li>根据<code>ReactElement</code>对象, 调用<code>reconcileChildren</code>生成<code>Fiber</code>子节点(只生成<code>次级子节点</code>) <ul><li>根据实际情况, 设置<code>fiber.flags</code></li></ul></li></ol><p>不同的<code>updateXXX</code>函数处理的<code>fiber</code>节点类型不同, 总的目的是为了向下生成子节点. 在这个过程中把一些需要持久化的数据挂载到<code>fiber</code>节点上(如<code>fiber.stateNode</code>,<code>fiber.memoizedState</code>等); 把<code>fiber</code>节点的特殊操作设置到<code>fiber.flags</code>(如:<code>节点ref</code>,<code>class组件的生命周期</code>,<code>function组件的hook</code>,<code>节点删除</code>等).</p><p>这里列出<code>updateHostRoot</code>, <code>updateHostComponent</code>的代码, 对于其他常用 case 的分析(如<code>class</code>类型, <code>function</code>类型), 在<code>状态组件</code>章节中进行探讨.</p>`,6),Ln=s("code",null,"fiber树",-1),En=s("code",null,"HostRootFiber",-1),On=s("code",null,"beginWork",-1),jn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L1053-L1122",target:"_blank",rel:"noopener noreferrer"},Hn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 省略与本节无关代码</span>
<span class="token keyword">function</span> <span class="token function">updateHostRoot</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderLanes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 状态计算, 更新整合到 workInProgress.memoizedState中来</span>
  <span class="token keyword">const</span> updateQueue <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>updateQueue<span class="token punctuation">;</span>
  <span class="token keyword">const</span> nextProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">const</span> prevState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
  <span class="token keyword">const</span> prevChildren <span class="token operator">=</span> prevState <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> prevState<span class="token punctuation">.</span>element <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token function">cloneUpdateQueue</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 遍历updateQueue.shared.pending, 提取有足够优先级的update对象, 计算出最终的状态 workInProgress.memoizedState</span>
  <span class="token function">processUpdateQueue</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">,</span> nextProps<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> nextState <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>
  <span class="token comment">// 2. 获取下级\`ReactElement\`对象</span>
  <span class="token keyword">const</span> nextChildren <span class="token operator">=</span> nextState<span class="token punctuation">.</span>element<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>hydrate <span class="token operator">&amp;&amp;</span> <span class="token function">enterHydrationState</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...服务端渲染相关, 此处省略</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3. 根据\`ReactElement\`对象, 调用\`reconcileChildren\`生成\`Fiber\`子节点(只生成\`次级子节点\`)</span>
    <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Sn=s("code",null,"div",-1),Un=s("code",null,"span",-1),Dn=s("code",null,"p",-1),Nn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L1124-L1157",target:"_blank",rel:"noopener noreferrer"},An=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...省略部分无关代码</span>
<span class="token keyword">function</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 状态计算, 由于HostComponent是无状态组件, 所以只需要收集 nextProps即可, 它没有 memoizedState</span>
  <span class="token keyword">const</span> type <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
  <span class="token keyword">const</span> nextProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">const</span> prevProps <span class="token operator">=</span> current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> current<span class="token punctuation">.</span>memoizedProps <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. 获取下级\`ReactElement\`对象</span>
  <span class="token keyword">let</span> nextChildren <span class="token operator">=</span> nextProps<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
  <span class="token keyword">const</span> isDirectTextChild <span class="token operator">=</span> <span class="token function">shouldSetTextContent</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> nextProps<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>isDirectTextChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果子节点只有一个文本节点, 不用再创建一个HostText类型的fiber</span>
    nextChildren <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prevProps <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">shouldSetTextContent</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> prevProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 特殊操作需要设置fiber.flags</span>
    workInProgress<span class="token punctuation">.</span>flags <span class="token operator">|=</span> ContentReset<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 特殊操作需要设置fiber.flags</span>
  <span class="token function">markRef</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 3. 根据\`ReactElement\`对象, 调用\`reconcileChildren\`生成\`Fiber\`子节点(只生成\`次级子节点\`)</span>
  <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> renderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回溯阶段-completework" tabindex="-1"><a class="header-anchor" href="#回溯阶段-completework" aria-hidden="true">#</a> 回溯阶段 completeWork</h3>`,2),Mn=s("code",null,"completeUnitOfWork(unitOfWork)",-1),Tn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L1670-L1802",target:"_blank",rel:"noopener noreferrer"},Bn=s("code",null,"beginWork",-1),zn=s("code",null,"fiber",-1),Xn=o(`<ol><li>调用<code>completeWork</code><ul><li>给<code>fiber</code>节点(tag=HostComponent, HostText)创建 DOM 实例, 设置<code>fiber.stateNode</code>局部状态(如<code>tag=HostComponent, HostText</code>节点: fiber.stateNode 指向这个 DOM 实例).</li><li>为 DOM 节点设置属性, 绑定事件(这里先说明有这个步骤, 详细的事件处理流程, 在<code>合成事件原理</code>中详细说明).</li><li>设置<code>fiber.flags</code>标记</li></ul></li><li>把当前 <code>fiber</code> 对象的副作用队列(<code>firstEffect</code>和<code>lastEffect</code>)添加到父节点的副作用队列之后, 更新父节点的<code>firstEffect</code>和<code>lastEffect</code>指针.</li><li>识别<code>beginWork</code>阶段设置的<code>fiber.flags</code>, 判断当前 <code>fiber</code> 是否有副作用(增,删,改), 如果有, 需要将当前 <code>fiber</code> 加入到父节点的<code>effects</code>队列, 等待<code>commit</code>阶段处理.</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">unitOfWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> completedWork <span class="token operator">=</span> unitOfWork<span class="token punctuation">;</span>
  <span class="token comment">// 外层循环控制并移动指针(\`workInProgress\`,\`completedWork\`等)</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> current <span class="token operator">=</span> completedWork<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
    <span class="token keyword">const</span> returnFiber <span class="token operator">=</span> completedWork<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>completedWork<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Incomplete<span class="token punctuation">)</span> <span class="token operator">===</span> NoFlags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> next<span class="token punctuation">;</span>
      <span class="token comment">// 1. 处理Fiber节点, 会调用渲染器(调用react-dom包, 关联Fiber节点和dom对象, 绑定事件等)</span>
      next <span class="token operator">=</span> <span class="token function">completeWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> completedWork<span class="token punctuation">,</span> subtreeRenderLanes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理单个节点</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果派生出其他的子节点, 则回到\`beginWork\`阶段进行处理</span>
        workInProgress <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 重置子节点的优先级</span>
      <span class="token function">resetChildLanes</span><span class="token punctuation">(</span>completedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>
        returnFiber <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Incomplete<span class="token punctuation">)</span> <span class="token operator">===</span> NoFlags
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2. 收集当前Fiber节点以及其子树的副作用effects</span>
        <span class="token comment">// 2.1 把子节点的副作用队列添加到父节点上</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          returnFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> completedWork<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>completedWork<span class="token punctuation">.</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> completedWork<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> completedWork<span class="token punctuation">.</span>lastEffect<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 2.2 如果当前fiber节点有副作用, 将其添加到子节点的副作用队列之后.</span>
        <span class="token keyword">const</span> flags <span class="token operator">=</span> completedWork<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&gt;</span> PerformedWork<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// PerformedWork是提供给 React DevTools读取的, 所以略过PerformedWork</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> completedWork<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            returnFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> completedWork<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> completedWork<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 异常处理, 本节不讨论</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> siblingFiber <span class="token operator">=</span> completedWork<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>siblingFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果有兄弟节点, 返回之后再次进入\`beginWork\`阶段</span>
      workInProgress <span class="token operator">=</span> siblingFiber<span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 移动指针, 指向下一个节点</span>
    completedWork <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
    workInProgress <span class="token operator">=</span> completedWork<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>completedWork <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 已回溯到根节点, 设置workInProgressRootExitStatus = RootCompleted</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressRootExitStatus <span class="token operator">===</span> RootIncomplete<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    workInProgressRootExitStatus <span class="token operator">=</span> RootCompleted<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Qn=s("code",null,"fiber",-1),qn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L645-L1289",target:"_blank",rel:"noopener noreferrer"},Vn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">completeWork</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span>
  <span class="token literal-property property">renderLanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> newProps <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token literal-property property">ClassComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// Class类型不做处理</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> fiberRoot <span class="token operator">=</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>stateNode<span class="token operator">:</span> FiberRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fiberRoot<span class="token punctuation">.</span>pendingContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fiberRoot<span class="token punctuation">.</span>context <span class="token operator">=</span> fiberRoot<span class="token punctuation">.</span>pendingContext<span class="token punctuation">;</span>
        fiberRoot<span class="token punctuation">.</span>pendingContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> current<span class="token punctuation">.</span>child <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// 设置fiber.flags标记</span>
         workInProgress<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Snapshot<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">popHostContext</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> rootContainerInstance <span class="token operator">=</span> <span class="token function">getRootHostContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> type <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>type<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// update逻辑, 初次render不会进入</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> currentHostContext <span class="token operator">=</span> <span class="token function">getHostContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1. 创建DOM对象</span>
        <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>
          type<span class="token punctuation">,</span>
          newProps<span class="token punctuation">,</span>
          rootContainerInstance<span class="token punctuation">,</span>
          currentHostContext<span class="token punctuation">,</span>
          workInProgress<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 把子树中的DOM对象append到本节点的DOM对象之后</span>
        <span class="token function">appendAllChildren</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置stateNode属性, 指向DOM对象</span>
        workInProgress<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> instance<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          <span class="token comment">// 3. 设置DOM对象的属性, 绑定事件等</span>
          <span class="token function">finalizeInitialChildren</span><span class="token punctuation">(</span>
            instance<span class="token punctuation">,</span>
            type<span class="token punctuation">,</span>
            newProps<span class="token punctuation">,</span>
            rootContainerInstance<span class="token punctuation">,</span>
            currentHostContext<span class="token punctuation">,</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 设置fiber.flags标记(Update)</span>
          <span class="token function">markUpdate</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 设置fiber.flags标记(Ref)</span>
          <span class="token function">markRef</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在满足条件的时候也会设置<code>fiber.flags</code>, 所以设置<code>fiber.flags</code>并非只在<code>beginWork</code>阶段.</p><h2 id="过程图解" tabindex="-1"><a class="header-anchor" href="#过程图解" aria-hidden="true">#</a> 过程图解</h2><p>针对本节的示例代码, 将整个<code>fiber</code>树构造过程表示出来:</p><p>构造前:</p><p>在上文已经说明, 进入循环构造前会调用<code>prepareFreshStack</code>刷新栈帧, 在进入<code>fiber树构造</code>循环之前, 保持这这个初始化状态:</p><p><img src="`+b+'" alt=""></p><p><code>performUnitOfWork</code>第 1 次调用(只执行<code>beginWork</code>):</p>',8),Yn=s("li",null,[n("执行前: "),s("code",null,"workInProgress"),n("指针指向"),s("code",null,"HostRootFiber.alternate"),n("对象, 此时"),s("code",null,"current = workInProgress.alternate"),n("指向"),s("code",null,"fiberRoot.current"),n("是非空的(初次构造, 只在根节点时, "),s("code",null,"current"),n("非空).")],-1),$n=s("code",null,"updateHostRoot",-1),Gn=s("code",null,"reconcileChildren",-1),Jn=s("code",null,"次级子节点fiber(<App/>)",-1),Kn=s("code",null,"fiber(<App/>)",-1),Zn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactChildFiber.old.js#L376-L378",target:"_blank",rel:"noopener noreferrer"},ns=s("li",null,[n("执行后: 返回下级节点"),s("code",null,"fiber(<App/>)"),n(", 移动"),s("code",null,"workInProgress"),n("指针指向子节点"),s("code",null,"fiber(<App/>)")],-1),ss=s("p",null,[s("img",{src:f,alt:""})],-1),as=s("p",null,[s("code",null,"performUnitOfWork"),n("第 2 次调用(只执行"),s("code",null,"beginWork"),n("):")],-1),es=s("li",null,[n("执行前: "),s("code",null,"workInProgress"),n("指针指向"),s("code",null,"fiber(<App/>)"),n("节点, 此时"),s("code",null,"current = null")],-1),os=s("code",null,"updateClassComponent",-1),ts=s("code",null,"componentDidMount",-1),ps=s("code",null,"fiber(<App/>)",-1),cs={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L892-L894",target:"_blank",rel:"noopener noreferrer"},ls=s("code",null,"React DevTools",-1),is={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L379",target:"_blank",rel:"noopener noreferrer"},rs=s("code",null,"commit",-1),us=s("code",null,"flag",-1),ds=s("code",null,"workInProgress.flags",-1),ks=s("code",null,"React DevTools",-1),vs=o("<li>需要注意<code>classInstance.render()</code>在本步骤执行后, 虽然返回了<code>render</code>方法中所有的<code>ReactElement</code>对象, 但是随后<code>reconcileChildren</code>只构造<code>次级子节点</code></li><li>在<code>reconcileChildren</code>阶段, 向下构造<code>次级子节点div</code></li>",2),ms=s("li",null,[n("执行后: 返回下级节点"),s("code",null,"fiber(div)"),n(", 移动"),s("code",null,"workInProgress"),n("指针指向子节点"),s("code",null,"fiber(div)")],-1),bs=o('<p><img src="'+g+'" alt=""></p><p><code>performUnitOfWork</code>第 3 次调用(只执行<code>beginWork</code>):</p><ul><li>执行前: <code>workInProgress</code>指针指向<code>fiber(div)</code>节点, 此时<code>current = null</code></li><li>执行过程: 调用<code>updateHostComponent</code><ul><li>在<code>reconcileChildren</code>阶段, 向下构造<code>次级子节点</code>(本示例中, <code>div</code>有 2 个次级子节点)</li></ul></li><li>执行后: 返回下级节点<code>fiber(header)</code>, 移动<code>workInProgress</code>指针指向子节点<code>fiber(header)</code></li></ul><p><img src="'+h+'" alt=""></p><p><code>performUnitOfWork</code>第 4 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):</p>',5),fs=s("li",null,[s("code",null,"beginWork"),n("执行前: "),s("code",null,"workInProgress"),n("指针指向"),s("code",null,"fiber(header)"),n("节点, 此时"),s("code",null,"current = null")],-1),gs=s("code",null,"beginWork",-1),hs=s("code",null,"updateHostComponent",-1),ws=s("code",null,"header",-1),_s={href:"https://github.com/facebook/react/blob/8e5adfbd7e605bda9c5e96c10e015b3dc0df688e/packages/react-dom/src/client/ReactDOMHostConfig.js#L350-L361",target:"_blank",rel:"noopener noreferrer"},ys={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L1147",target:"_blank",rel:"noopener noreferrer"},Ps=s("code",null,"fiber",-1),Rs=s("code",null,"HostText",-1),Ws=s("li",null,[n("由于"),s("code",null,"nextChildren = null"),n(", 经过"),s("code",null,"reconcileChildren"),n("阶段处理后, 返回值也是"),s("code",null,"null")],-1),Cs=s("li",null,[s("code",null,"beginWork"),n("执行后: 由于下级节点为"),s("code",null,"null"),n(", 所以进入"),s("code",null,"completeUnitOfWork(unitOfWork)"),n("函数, 传入的参数"),s("code",null,"unitOfWork"),n("实际上就是"),s("code",null,"workInProgress"),n("(此时指向"),s("code",null,"fiber(header)"),n("节点)")],-1),Is=o('<p><img src="'+w+'" alt=""></p><ul><li><code>completeUnitOfWork</code>执行前: <code>workInProgress</code>指针指向<code>fiber(header)</code>节点</li><li><code>completeUnitOfWork</code>执行过程: 以<code>fiber(header)</code>为起点, 向上回溯</li></ul><p>第 1 次循环:</p><ol><li>执行<code>completeWork</code>函数 <ul><li>创建<code>fiber(header)</code>节点对应的<code>DOM</code>实例, 并<code>append</code>子节点的<code>DOM</code>实例</li><li>设置<code>DOM</code>属性, 绑定事件等(本示例中, 节点<code>fiber(header)</code>没有事件绑定)</li></ul></li><li>上移副作用队列: 由于本节点<code>fiber(header)</code>没有副作用(<code>fiber.flags = 0</code>), 所以执行之后副作用队列没有实质变化(目前为空).</li><li>向上回溯: 由于还有兄弟节点, 把<code>workInProgress</code>指针指向下一个兄弟节点<code>fiber(&lt;Content/&gt;)</code>, 退出<code>completeUnitOfWork</code>.</li></ol><p><img src="'+_+'" alt=""></p><p><code>performUnitOfWork</code>第 5 次调用(执行<code>beginWork</code>):</p><ul><li>执行前:<code>workInProgress</code>指针指向<code>fiber(&lt;Content/&gt;)</code>节点.</li><li>执行过程: 这是一个<code>class</code>类型的节点, 与第 2 次调用逻辑一致.</li><li>执行后: 返回下级节点<code>fiber(p)</code>, 移动<code>workInProgress</code>指针指向子节点<code>fiber(p)</code></li></ul><p><img src="'+y+'" alt=""></p><p><code>performUnitOfWork</code>第 6 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):与第 4 次调用中创建<code>fiber(header)</code>节点的逻辑一致. 先后会执行<code>beginWork</code>和<code>completeUnitOfWork</code>, 最后构造 DOM 实例, 并将把<code>workInProgress</code>指针指向下一个兄弟节点<code>fiber(p)</code>.</p><p><img src="'+P+'" alt=""></p><p><code>performUnitOfWork</code>第 7 次调用(执行<code>beginWork</code>和<code>completeUnitOfWork</code>):</p><ul><li><code>beginWork</code>执行过程: 与上次调用中创建<code>fiber(p)</code>节点的逻辑一致</li><li><code>completeUnitOfWork</code>执行过程: 以<code>fiber(p)</code>为起点, 向上回溯</li></ul><p>第 1 次循环:</p><ol><li>执行<code>completeWork</code>函数: 创建<code>fiber(p)</code>节点对应的<code>DOM</code>实例, 并<code>append</code>子树节点的<code>DOM</code>实例</li><li>上移副作用队列: 由于本节点<code>fiber(p)</code>没有副作用, 所以执行之后副作用队列没有实质变化(目前为空).</li><li>向上回溯: 由于没有兄弟节点, 把<code>workInProgress</code>指针指向父节点<code>fiber(&lt;Content/&gt;)</code></li></ol><p><img src="'+R+'" alt=""></p><p>第 2 次循环:</p><ol><li>执行<code>completeWork</code>函数: class 类型的节点不做处理</li><li>上移副作用队列: <ul><li>本节点<code>fiber(&lt;Content/&gt;)</code>的<code>flags</code>标志位有改动(<code>completedWork.flags &gt; PerformedWork</code>), 将本节点添加到父节点(<code>fiber(div)</code>)的副作用队列之后(<code>firstEffect</code>和<code>lastEffect</code>属性分别指向副作用队列的首部和尾部).</li></ul></li><li>向上回溯: 把<code>workInProgress</code>指针指向父节点<code>fiber(div)</code></li></ol><p><img src="'+W+'" alt=""></p><p>第 3 次循环:</p><ol><li>执行<code>completeWork</code>函数: 创建<code>fiber(div)</code>节点对应的<code>DOM</code>实例, 并<code>append</code>子树节点的<code>DOM</code>实例</li><li>上移副作用队列: <ul><li>本节点<code>fiber(div)</code>的副作用队列不为空, 将其拼接到父节点<code>fiber&lt;App/&gt;</code>的副作用队列后面.</li></ul></li><li>向上回溯: 把<code>workInProgress</code>指针指向父节点<code>fiber(&lt;App/&gt;)</code></li></ol><p><img src="'+C+'" alt=""></p><p>第 4 次循环:</p><ol><li>执行<code>completeWork</code>函数: class 类型的节点不做处理</li><li>上移副作用队列: <ul><li>本节点<code>fiber(&lt;App/&gt;)</code>的副作用队列不为空, 将其拼接到父节点<code>fiber(HostRootFiber)</code>的副作用队列上.</li><li>本节点<code>fiber(&lt;App/&gt;)</code>的<code>flags</code>标志位有改动(<code>completedWork.flags &gt; PerformedWork</code>), 将本节点添加到父节点<code>fiber(HostRootFiber)</code>的副作用队列之后.</li><li>最后队列的顺序是<code>子节点在前, 本节点在后</code></li></ul></li><li>向上回溯: 把<code>workInProgress</code>指针指向父节点<code>fiber(HostRootFiber)</code></li></ol><p><img src="'+I+'" alt=""></p><p>第 5 次循环:</p>',25),xs=s("code",null,"completeWork",-1),Fs=s("code",null,"HostRoot",-1),Ls={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L693",target:"_blank",rel:"noopener noreferrer"},Es=s("li",null,[n("向上回溯: 由于父节点为空, 无需进入处理副作用队列的逻辑. 最后设置"),s("code",null,"workInProgress=null"),n(", 并退出"),s("code",null,"completeUnitOfWork")],-1),Os=o('<p><img src="'+x+'" alt=""></p><p>到此整个<code>fiber树构造循环</code>已经执行完毕, 拥有一棵完整的<code>fiber树</code>, 并且在<code>fiber树</code>的根节点上挂载了副作用队列, 副作用队列的顺序是层级越深子节点越靠前.</p><p><code>renderRootSync</code>函数退出之前, 会重置<code>workInProgressRoot = null</code>, 表明没有正在进行中的<code>render</code>. 且把最新的<code>fiber树</code>挂载到<code>fiberRoot.finishedWork</code>上. 这时整个 fiber 树的内存结构如下(注意<code>fiberRoot.finishedWork</code>和<code>fiberRoot.current</code>指针,在<code>commitRoot</code>阶段会进行处理):</p><p><img src="'+i+'" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节演示了初次创建<code>fiber树</code>的全部过程, 跟踪了创建过程中内存引用的变化情况. <code>fiber树构造循环</code>负责构造新的<code>fiber</code>树, 构造过程中同时标记<code>fiber.flags</code>, 最终把所有被标记的<code>fiber</code>节点收集到一个副作用队列中, 这个副作用队列被挂载到根节点上(<code>HostRootFiber.alternate.firstEffect</code>). 此时的<code>fiber树</code>和与之对应的<code>DOM节点</code>都还在内存当中, 等待<code>commitRoot</code>阶段进行渲染.</p>',6);function js(Hs,Ss){const t=c("RouterLink"),e=c("ExternalLinkIcon");return u(),d("div",null,[L,s("p",null,[n("本节的内容完全建立在前文"),a(t,{to:"/docs/react/principle-analysis/fibertree-prepare.html"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n("中介绍的基础知识之上, 其中总结了"),E,n("的 2 种情况:")]),O,s("p",null,[n("本节只讨论"),j,n("这种情况, 为了控制篇幅(本节直击核心源码, 不再介绍基础知识, 可参照"),a(t,{to:"/docs/react/principle-analysis/fibertree-prepare.html"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n(")并突出"),H,n("过程, 后文会在"),S,n("模式下进行分析(因为只讨论"),U,n("原理, "),D,n("模式与"),N,n("没有区别).")]),s("p",null,[n("本节示例代码如下("),s("a",A,[n("codesandbox 地址"),a(e)]),n("):")]),M,s("p",null,[n("在前文"),a(t,{to:"/docs/react/principle-analysis/bootstrap.html"},{default:p(()=>[n("React 应用的启动过程")]),_:1}),n("中分析了 3 种启动模式的差异, 在进入"),T,n("包之前(调用"),B,n("之前), 内存状态图如下:")]),z,s("p",null,[n("然后进入"),X,n("包调用"),s("a",Q,[n("updateContainer 函数"),a(e)]),n(":")]),q,s("p",null,[n("在"),s("a",V,[n("scheduleUpdateOnFiber 函数"),a(e)]),n("中:")]),Y,s("p",null,[n("可以看到, 在"),$,n("模式下且首次渲染时, 有 2 个函数"),s("a",G,[n("markUpdateLaneFromFiberToRoot"),a(e)]),n("和"),s("a",J,[n("performSyncWorkOnRoot"),a(e)]),n(".")]),K,s("p",null,[n("其中"),Z,n("返回本次 render 的渲染优先级(详见"),a(t,{to:"/docs/react/principle-analysis/fibertree-prepare.html#%E4%BC%98%E5%85%88%E7%BA%A7"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n("中"),nn,n("相关小节)")]),s("p",null,[s("a",sn,[n("renderRootSync"),a(e)])]),an,s("p",null,[n("在"),en,n("中, 在执行"),on,n("前("),tn,n(")会先刷新栈帧"),pn,n("(参考"),a(t,{to:"/docs/react/principle-analysis/fibertree-prepare.html#%E6%A0%88%E5%B8%A7%E7%AE%A1%E7%90%86"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n(").在这里创建了"),cn,n(", 重置全局变量"),ln,n("和"),rn,n("等.")]),un,s("p",null,[n("可以看到"),dn,n("相比于"),kn,n(", 会多一个停顿机制, 这个机制实现了"),vn,n("和"),mn,n("(参考"),a(t,{to:"/docs/react/principle-analysis/scheduler.html#%E6%97%B6%E9%97%B4%E5%88%87%E7%89%87%E5%8E%9F%E7%90%86"},{default:p(()=>[n("React 调度原理")]),_:1}),n(")")]),s("p",null,[n("结合"),bn,n("("),s("a",fn,[n("源码地址"),a(e)]),n(")")]),gn,s("p",null,[n("可以明显的看出, 整个"),hn,n("是一个深度优先遍历(可参考"),a(t,{to:"/docs/react/algorithm/dfs.html"},{default:p(()=>[n("React 算法之深度优先遍历")]),_:1}),n("), 其中有 2 个重要的变量"),wn,n("和"),_n,n("(可参考前文"),a(t,{to:"/docs/react/principle-analysis/fibertree-prepare.html#%E5%8F%8C%E7%BC%93%E5%86%B2%E6%8A%80%E6%9C%AF"},{default:p(()=>[n("fiber 树构造(基础准备)")]),_:1}),n("中介绍的"),yn,n("):")]),Pn,s("p",null,[Rn,n("("),s("a",Wn,[n("源码地址"),a(e)]),n(")针对所有的 Fiber 类型, 其中的每一个 case 处理一种 Fiber 类型. "),Cn,n("函数(如: "),In,n(", "),xn,n(" 等)的主要逻辑:")]),Fn,s("p",null,[Ln,n("的根节点是"),En,n("节点, 所以第一次进入"),On,n("会调用"),s("a",jn,[n("updateHostRoot(current, workInProgress, renderLanes)"),a(e)])]),Hn,s("p",null,[n("普通 DOM 标签类型的节点(如"),Sn,n(","),Un,n(","),Dn,n("),会进入"),s("a",Nn,[n("updateHostComponent"),a(e)]),n(":")]),An,s("p",null,[Mn,n("("),s("a",Tn,[n("源码地址"),a(e)]),n("), 处理 "),Bn,n(" 阶段已经创建出来的 "),zn,n(" 节点, 核心逻辑:")]),Xn,s("p",null,[n("接下来分析"),Qn,n("处理函数"),s("a",qn,[n("completeWork"),a(e)])]),Vn,s("ul",null,[Yn,s("li",null,[n("执行过程: 调用"),$n,s("ul",null,[s("li",null,[n("在"),Gn,n("阶段, 向下构造"),Jn,n(", 同时设置子节点("),Kn,n(")"),s("a",Zn,[n("fiber.flags |= Placement"),a(e)])])])]),ns]),ss,as,s("ul",null,[es,s("li",null,[n("执行过程: 调用"),os,s("ul",null,[s("li",null,[n("本示例中, class 实例存在生命周期函数"),ts,n(", 所以会设置"),ps,n("节点"),s("a",cs,[n("workInProgress.flags |= Update"),a(e)])]),s("li",null,[n("另外也会为了"),ls,n("能够识别状态组件的执行进度, 会设置"),s("a",is,[n("workInProgress.flags |= PerformedWork"),a(e)]),n("(在"),rs,n("阶段会排除这个"),us,n(", 此处只是列出"),ds,n("的设置场景, 不讨论"),ks,n(")")]),vs])]),ms]),bs,s("ul",null,[fs,s("li",null,[gs,n("执行过程: 调用"),hs,s("ul",null,[s("li",null,[n("本示例中"),ws,n("的子节点是一个"),s("a",_s,[n("直接文本节点"),a(e)]),n(",设置"),s("a",ys,[n("nextChildren = null"),a(e)]),n("(直接文本节点并不会被当成具体的"),Ps,n("节点进行处理, 而是在宿主环境(父组件)中通过属性进行设置. 所以无需创建"),Rs,n("类型的 fiber 节点, 同时节省了向下遍历开销.).")]),Ws])]),Cs]),Is,s("ol",null,[s("li",null,[n("执行"),xs,n("函数: 对于"),Fs,n("类型的节点, 初次构造时设置"),s("a",Ls,[n("workInProgress.flags |= Snapshot"),a(e)])]),Es]),Os])}const As=r(F,[["render",js],["__file","fibertree-create.html.vue"]]);export{As as default};
