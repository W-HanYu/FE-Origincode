import{_ as l,p as i,q as r,s as n,R as s,t as a,a2 as c,Y as o,n as p}from"./framework-e1bed10d.js";const d={},u=o('<h1 id="状态与副作用" tabindex="-1"><a class="header-anchor" href="#状态与副作用" aria-hidden="true">#</a> 状态与副作用</h1><p>在前文我们已经分析了<code>fiber树</code>从<code>构造</code>到<code>渲染</code>的关键过程. 本节我们站在<code>fiber</code>对象的视角, 考虑一个具体的<code>fiber</code>节点如何影响最终的渲染.</p>',2),k={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactInternalTypes.js#L47-L174",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"fiber树构造",-1),b=n("code",null,"fiber",-1),f=o(`<ol><li><p><code>fiber</code>节点的自身状态: 在<code>renderRootSync[Concurrent]</code>阶段, 为子节点提供确定的输入数据, 直接影响子节点的生成.</p></li><li><p><code>fiber</code>节点的副作用: 在<code>commitRoot</code>阶段, 如果<code>fiber</code>被标记有副作用, 则副作用相关函数会被(同步/异步)调用.</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> type Fiber <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">|</span>
  <span class="token comment">// 1. fiber节点自身状态相关</span>
  <span class="token literal-property property">pendingProps</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">memoizedProps</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">updateQueue</span><span class="token operator">:</span> mixed<span class="token punctuation">,</span>
  <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> any<span class="token punctuation">,</span>

  <span class="token comment">// 2. fiber节点副作用(Effect)相关</span>
  <span class="token literal-property property">flags</span><span class="token operator">:</span> Flags<span class="token punctuation">,</span>
  <span class="token literal-property property">subtreeFlags</span><span class="token operator">:</span> Flags<span class="token punctuation">,</span> <span class="token comment">// v17.0.2未启用</span>
  <span class="token literal-property property">deletions</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Fiber<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// v17.0.2未启用</span>
  <span class="token literal-property property">nextEffect</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">firstEffect</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastEffect</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="状态" tabindex="-1"><a class="header-anchor" href="#状态" aria-hidden="true">#</a> 状态</h2><p>与<code>状态</code>相关有 4 个属性:</p><ol><li><code>fiber.pendingProps</code>: 输入属性, 从<code>ReactElement</code>对象传入的 props. 它和<code>fiber.memoizedProps</code>比较可以得出属性是否变动.</li><li><code>fiber.memoizedProps</code>: 上一次生成子节点时用到的属性, 生成子节点之后保持在内存中. 向下生成子节点之前叫做<code>pendingProps</code>, 生成子节点之后会把<code>pendingProps</code>赋值给<code>memoizedProps</code>用于下一次比较.<code>pendingProps</code>和<code>memoizedProps</code>比较可以得出属性是否变动.</li><li><code>fiber.updateQueue</code>: 存储<code>update更新对象</code>的队列, 每一次发起更新, 都需要在该队列上创建一个<code>update对象</code>.</li><li><code>fiber.memoizedState</code>: 上一次生成子节点之后保持在内存中的局部状态.</li></ol><p>它们的作用只局限于<code>fiber树构造</code>阶段, 直接影响子节点的生成.</p><h2 id="副作用" tabindex="-1"><a class="header-anchor" href="#副作用" aria-hidden="true">#</a> 副作用</h2><p>与<code>副作用</code>相关有 4 个属性:</p>`,8),v=n("code",null,"fiber.flags",-1),h=n("code",null,"fiber",-1),_={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberFlags.js#L13",target:"_blank",rel:"noopener noreferrer"},g=o("<li><code>fiber.nextEffect</code>: 单向链表, 指向下一个副作用 <code>fiber</code>节点.</li><li><code>fiber.firstEffect</code>: 单向链表, 指向第一个副作用 <code>fiber</code> 节点.</li><li><code>fiber.lastEffect</code>: 单向链表, 指向最后一个副作用 <code>fiber</code> 节点.</li>",3),y=n("code",null,"fiber树构造",-1),E=n("code",null,"fiber",-1),L=n("code",null,"commitRoot",-1),R=n("code",null,"react",-1),x=o(`<p>另外, <code>副作用</code>的设计可以理解为对<code>状态</code>功能不足的补充.</p><ul><li><code>状态</code>是一个<code>静态</code>的功能, 它只能为子节点提供数据源.</li><li>而<code>副作用</code>是一个<code>动态</code>功能, 由于它的调用时机是在<code>fiber树渲染阶段</code>, 故它拥有更多的能力, 能轻松获取<code>突变前快照, 突变后的DOM节点等</code>. 甚至通过<code>调用api</code>发起新的一轮<code>fiber树构造</code>, 进而改变更多的<code>状态</code>, 引发更多的<code>副作用</code>.</li></ul><h2 id="外部-api" tabindex="-1"><a class="header-anchor" href="#外部-api" aria-hidden="true">#</a> 外部 api</h2><p><code>fiber</code>对象的这 2 类属性, 可以影响到渲染结果, 但是<code>fiber</code>结构始终是一个内核中的结构, 对于外部来讲是无感知的, 对于调用方来讲, 甚至都无需知道<code>fiber</code>结构的存在. 所以正常只有通过暴露<code>api</code>来直接或间接的修改这 2 类属性.</p><p>从<code>react</code>包暴露出的<code>api</code>来归纳, 只有 2 类组件支持修改:</p><blockquote><p>本节只讨论使用<code>api</code>的目的是修改<code>fiber</code>的<code>状态</code>和<code>副作用</code>, 进而可以改变整个渲染结果. 本节先介绍 api 与<code>状态</code>和<code>副作用</code>的联系, 有关<code>api</code>的具体实现会在<code>class组件</code>,<code>Hook原理</code>章节中详细分析.</p></blockquote><h3 id="class-组件" tabindex="-1"><a class="header-anchor" href="#class-组件" aria-hidden="true">#</a> class 组件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token comment">// 初始状态</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">changeState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入reconciler流程</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 生命周期函数: 状态相关</span>
  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;getDerivedStateFromProps&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prevState<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 生命周期函数: 状态相关</span>
  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">newProps<span class="token punctuation">,</span> newState<span class="token punctuation">,</span> nextContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;shouldComponentUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 生命周期函数: 副作用相关 fiber.flags |= Update</span>
  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentDidMount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 生命周期函数: 副作用相关 fiber.flags |= Snapshot</span>
  <span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;getSnapshotBeforeUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 生命周期函数: 副作用相关 fiber.flags |= Update</span>
  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentDidUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回下级ReactElement对象</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeState<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),F=n("p",null,[s("状态相关: "),n("code",null,"fiber树构造"),s("阶段.")],-1),S=n("li",null,[s("构造函数: "),n("code",null,"constructor"),s("实例化时执行, 可以设置初始 state, 只执行一次.")],-1),w=n("code",null,"getDerivedStateFromProps",-1),C=n("code",null,"fiber树构造",-1),j=n("code",null,"renderRootSync[Concurrent]",-1),P={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L867-L875",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"shouldComponentUpdate",-1),U=n("code",null,"fiber树构造",-1),B=n("code",null,"renderRootSync[Concurrent]",-1),M={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberClassComponent.old.js#L1135-L1143",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,[s("副作用相关: "),n("code",null,"fiber树渲染"),s("阶段.")],-1),z=n("code",null,"getSnapshotBeforeUpdate",-1),O=n("code",null,"fiber树渲染",-1),W=n("code",null,"commitRoot->commitBeforeMutationEffects->commitBeforeMutationEffectOnFiber",-1),A={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L264",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"componentDidMount",-1),V=n("code",null,"fiber树渲染",-1),q=n("code",null,"commitRoot->commitLayoutEffects->commitLayoutEffectOnFiber",-1),I={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L533",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"componentDidUpdate",-1),T=n("code",null,"fiber树渲染",-1),Y=n("code",null,"commitRoot->commitLayoutEffects->commitLayoutEffectOnFiber",-1),G={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L587",target:"_blank",rel:"noopener noreferrer"},J=o('<p>可以看到, 官方<code>api</code>提供的<code>class组件</code>生命周期函数实际上也是围绕<code>fiber树构造</code>和<code>fiber树渲染</code>来提供的.</p><h3 id="function-组件" tabindex="-1"><a class="header-anchor" href="#function-组件" aria-hidden="true">#</a> function 组件</h3><p>注: <code>function组件</code>与<code>class组件</code>最大的不同是: <code>class组件</code>会实例化一个<code>instance</code>所以拥有独立的局部状态; 而<code>function组件</code>不会实例化, 它只是被直接调用, 故无法维护一份独立的局部状态, 只能依靠<code>Hook</code>对象间接实现局部状态(有关更多<code>Hook</code>实现细节, 在<code>Hook原理</code>章节中详细讨论).</p>',3),K=n("code",null,"v17.0.2",-1),X={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberHooks.old.js#L111-L125",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"useState, useEffect, useLayoutEffect等",-1),$=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 状态相关: 初始状态</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> setA<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">changeState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setA</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入reconciler流程</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 副作用相关: fiber.flags |= Update | Passive;</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">useEffect</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 副作用相关: fiber.flags |= Update;</span>
  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">useLayoutEffect</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回下级ReactElement对象</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>changeState<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),nn=n("li",null,[s("状态相关: "),n("code",null,"fiber树构造"),s("阶段. "),n("ol",null,[n("li",null,[n("code",null,"useState"),s("在"),n("code",null,"fiber树构造"),s("阶段("),n("code",null,"renderRootSync[Concurrent]"),s(")执行, 可以修改"),n("code",null,"Hook.memoizedState"),s(".")])])],-1),sn=n("code",null,"fiber树渲染",-1),an=n("code",null,"useEffect",-1),en=n("code",null,"fiber树渲染",-1),on=n("code",null,"commitRoot->commitBeforeMutationEffects->commitBeforeMutationEffectOnFiber",-1),tn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2290-L2295",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"useLayoutEffect",-1),pn=n("code",null,"fiber树渲染",-1),ln=n("code",null,"commitRoot->commitLayoutEffects->commitLayoutEffectOnFiber->commitHookEffectListMount",-1),rn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L481",target:"_blank",rel:"noopener noreferrer"},dn=n("h3",{id:"细节与误区",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#细节与误区","aria-hidden":"true"},"#"),s(" 细节与误区")],-1),un=n("p",null,"这里有 2 个细节:",-1),kn=n("code",null,"useEffect(function(){}, [])",-1),mn={href:"https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2290-L2295",target:"_blank",rel:"noopener noreferrer"},bn=o("<li><code>useLayoutEffect</code>和<code>Class组件</code>中的<code>componentDidMount,componentDidUpdate</code>从调用时机上来讲是等价的, 因为他们都在<code>commitRoot-&gt;commitLayoutEffects</code>函数中被调用. <ul><li>误区: 虽然官网文档推荐尽可能使用标准的 <code>useEffect</code> 以避免阻塞视觉更新 , 所以很多开发者使用<code>useEffect</code>来代替<code>componentDidMount,componentDidUpdate</code>是不准确的, 如果完全类比, <code>useLayoutEffect</code>比<code>useEffect</code>更符合<code>componentDidMount,componentDidUpdate</code>的定义.</li></ul></li>",1),fn={href:"https://codesandbox.io/s/fervent-napier-1ysb5",target:"_blank",rel:"noopener noreferrer"},vn=o('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节从<code>fiber</code>视角出发, 总结了<code>fiber</code>节点中可以影响最终渲染结果的 2 类属性(<code>状态</code>和<code>副作用</code>).并且归纳了<code>class</code>和<code>function</code>组件中, 直接或间接更改<code>fiber</code>属性的常用方式. 最后从<code>fiber树构造和渲染</code>的角度对<code>class的生命周期函数</code>与<code>function的Hooks函数</code>进行了比较.</p>',2);function hn(_n,gn){const e=p("ExternalLinkIcon"),t=p("RouterLink");return i(),r("div",null,[u,n("p",null,[s("回顾"),n("a",k,[s("fiber 数据结构"),a(e)]),s(", 并结合前文"),m,s("系列的解读, 我们注意到"),b,s("众多属性中, 有 2 类属性十分关键:")]),f,n("ol",null,[n("li",null,[v,s(": 标志位, 表明该"),h,s("节点有副作用(在 v17.0.2 中共定义了"),n("a",_,[s("28 种副作用"),a(e)]),s(").")]),g]),n("p",null,[s("通过前文"),y,s("我们知道, 单个"),E,s("节点的副作用队列最后都会上移到根节点上. 所以在"),L,s("阶段中, "),R,s("提供了 3 种处理副作用的方式(详见"),a(t,{to:"/docs/react/principle-analysis/fibertree-commit.html#%E6%B8%B2%E6%9F%93"},{default:c(()=>[s("fiber 树渲染")]),_:1}),s(").")]),x,n("ol",null,[n("li",null,[F,n("ol",null,[S,n("li",null,[s("生命周期: "),w,s("在"),C,s("阶段("),j,s(")执行, 可以修改 state("),n("a",P,[s("链接"),a(e)]),s(").")]),n("li",null,[s("生命周期: "),D,s("在, "),U,s("阶段("),B,s(")执行, 返回值决定是否执行 render("),n("a",M,[s("链接"),a(e)]),s(").")])])]),n("li",null,[H,n("ol",null,[n("li",null,[s("生命周期: "),z,s("在"),O,s("阶段("),W,s(")执行("),n("a",A,[s("链接"),a(e)]),s(").")]),n("li",null,[s("生命周期: "),N,s("在"),V,s("阶段("),q,s(")执行("),n("a",I,[s("链接"),a(e)]),s(").")]),n("li",null,[s("生命周期: "),Q,s("在"),T,s("阶段("),Y,s(")执行("),n("a",G,[s("链接"),a(e)]),s(").")])])])]),J,n("p",null,[s("在"),K,s("中共定义了"),n("a",X,[s("14 种 Hook"),a(e)]),s(", 其中最常用的"),Z]),$,n("ol",null,[nn,n("li",null,[s("副作用相关: "),sn,s("阶段. "),n("ol",null,[n("li",null,[an,s("在"),en,s("阶段("),on,s(")执行(注意是异步执行, "),n("a",tn,[s("链接"),a(e)]),s(").")]),n("li",null,[cn,s("在"),pn,s("阶段("),ln,s(")执行(同步执行, "),n("a",rn,[s("链接"),a(e)]),s(").")])])])]),dn,un,n("ol",null,[n("li",null,[kn,s("中的函数是"),n("a",mn,[s("异步执行"),a(e)]),s(", 因为它经过了调度中心(具体实现可以回顾"),a(t,{to:"/docs/react/principle-analysis/scheduler.html"},{default:c(()=>[s("调度原理")]),_:1}),s(").")]),bn]),n("p",null,[s("为了验证上述结论, 可以查看"),n("a",fn,[s("codesandbox 中的例子"),a(e)]),s(".")]),vn])}const En=l(d,[["render",hn],["__file","state-effects.html.vue"]]);export{En as default};
